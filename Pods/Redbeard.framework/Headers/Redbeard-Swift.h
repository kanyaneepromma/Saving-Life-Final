// Generated by Apple Swift version 4.2.1 effective-4.1.50 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import MessageUI;
@import ObjectiveC;
@import UIKit;
#endif

#import <Redbeard/Redbeard.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Redbeard",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class RBThemeTracker;
@class UIView;
@class RBThemeSchema;

/// Performs animations with a given configuration.
SWIFT_CLASS("_TtC8Redbeard10RBAnimator")
@interface RBAnimator : NSObject <NSCopying, RBThemeTrackerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultDuration;)
+ (CGFloat)defaultDuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultDelay;)
+ (CGFloat)defaultDelay SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSpringVelocity;)
+ (CGFloat)defaultSpringVelocity SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultSpringDampening;)
+ (CGFloat)defaultSpringDampening SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIViewAnimationCurve defaultCurve;)
+ (UIViewAnimationCurve)defaultCurve SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIViewAnimationOptions defaultOptions;)
+ (UIViewAnimationOptions)defaultOptions SWIFT_WARN_UNUSED_RESULT;
/// The theme tracker object. Use this to add further theme changes, apply and re-apply themes.
@property (nonatomic, readonly, strong) RBThemeTracker * _Nullable theme;
/// The duration of the animation in seconds.
@property (nonatomic) CGFloat duration;
/// The delay before beginning the animation in seconds.
@property (nonatomic) CGFloat delay;
/// The velocity of the spring animation. 0 = no spring
@property (nonatomic) CGFloat springVelocity;
/// The dampening of the spring animation, determining how quickly the initial force subsides.
@property (nonatomic) CGFloat springDampening;
/// The curve of the animation.
@property (nonatomic) UIViewAnimationCurve curve;
/// The animation options.
@property (nonatomic) UIViewAnimationOptions options;
/// Creates a new instance of an animator configured with the default settings.
/// @return The new animator object.
+ (RBAnimator * _Nonnull)newDefaultAnimator SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of an animator configured with the default spring animation settings.
/// @return The new animator object.
+ (RBAnimator * _Nonnull)newDefaultSpring SWIFT_WARN_UNUSED_RESULT;
/// Creates a new instance of an animator configured to mimick the keyboard transition animation.
/// @return The new animator object.
+ (RBAnimator * _Nonnull)newDefaultKeyboardAnimator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Enqueues a block to be executed after all currently queued animations are complete.
/// @param actionBlock The block to execute.
- (void)performAfterAnimations:(void (^ _Nonnull)(void))actionBlock;
/// Perform the given changes with an animation.
/// @param animated   Whether or not the changes should be animated.
/// @param changes    The changes block that will be called to make the UI changes. viewsToLayout should contain the list of the <code>UIViews</code> to animate.
/// @param completion An optional block to be called when the animation has completed.
- (void)performWithAnimation:(BOOL)animated changes:(NSArray<UIView *> * _Nullable (^ _Nonnull)(void))changes completion:(void (^ _Nullable)(void))completion;
- (void)performInMainThread:(void (^ _Nonnull)(void))action;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
@end

enum RBExtendViewState : NSInteger;
enum RBExtendViewPosition : NSInteger;
@protocol RBExtendViewDelegate;
@class NSCoder;

/// A base class for extend views for <code>RBExtendContainerView</code>.
SWIFT_CLASS("_TtC8Redbeard12RBExtendView")
@interface RBExtendView : UIView
/// The current factor by which the extend view is revealed (0 - 1). This takes into account the <code>insetBy</code> value. Reveal factor 1 = (dimension - insetBy) where dimension = width or height depending on the position of the extend view.
@property (nonatomic) CGFloat revealFactor;
/// The state of the extend view
@property (nonatomic, readonly) enum RBExtendViewState state;
/// The position of the extend view.
@property (nonatomic, readonly) enum RBExtendViewPosition position;
/// The reveal factor at which to consider the extend view opened. Default = 1.
/// If you set a openRevealFactor greater than 1 essentially the extend view can never acheive the ‘opened’ state.
/// Setting an extend view openRevealFactor greater than 1 can be useful in certain cicrumstances.
/// For certain scenarios and types of extend views it might be useful to have the open state at a different
/// value e.g. 0.75 (75%).
@property (nonatomic) CGFloat openRevealFactor;
/// The animator to use when opening and closing the extend view. Default = <code>defaultAnimator()</code>.
@property (nonatomic, strong) RBAnimator * _Nonnull animator;
/// A delegate to receive events.
@property (nonatomic, weak) id <RBExtendViewDelegate> _Nullable delegate;
/// Whether or not the extend view is enabled. If it is not enabled then it is hidden and cannot be revealed or opened.
/// Default = <code>true</code>.
@property (nonatomic) BOOL enabled;
/// Whether or not the extend view should close if it is in the open state and the
/// scroll view is dragged in the closing direction. Default = <code>false</code>.
@property (nonatomic) BOOL closeOnDrag;
/// Calculates the exposed area of the extend view for the given reveal factor.
/// @param factor The reveal factor.
/// @return The exposed region of the extend view.
- (CGRect)exposedFrameForRevealFactor:(CGFloat)factor SWIFT_WARN_UNUSED_RESULT;
/// Opens the extend view.
- (void)open;
/// Closes the extend view.
- (void)close;
/// How much to inset the extend view by. Default = 0. (The view is placed with no inset and so appears hidden).
/// If you would like the extend view to be partially or fully visible provide an inset > 0.
/// The inset value will show the partial/full extend view by the amount provided in the given position.
- (CGFloat)insetBy SWIFT_WARN_UNUSED_RESULT;
/// Whether or not to allow the extend view to remain opened and extended when the <code>opened</code> state is first set. Default = YES.
- (BOOL)keepExtendedWhenOpen SWIFT_WARN_UNUSED_RESULT;
/// Called to determine if the extend view may open. Default = <code>YES</code>.
- (BOOL)shouldOpen SWIFT_WARN_UNUSED_RESULT;
/// Called when the extend view will open.
- (void)willOpen;
/// Called when the extend view did open.
- (void)didOpen;
/// Called when the extend view will close.
- (void)willClose;
/// Called when the extend view did close.
- (void)didClose;
/// Called when the extend view has been added to indicate the side that is was added to.
/// @param parent       The frame of the parent <code>RBScrollView</code>.
- (void)positionDidChangeWithParent:(CGRect)parent;
/// Called when the reveal factor has changed.
/// @param to       The new reveal factor.
/// @param from     The previous reveal factor.
- (void)revealFactorDidChange:(CGFloat)to from:(CGFloat)from;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum RBBannerExtendViewEffect : NSInteger;
@class UIImage;

/// An extend view that displays an image banner that grows when dragged.
SWIFT_CLASS("_TtC8Redbeard18RBBannerExtendView")
@interface RBBannerExtendView : RBExtendView
/// The amount of the banner to reveal when it is in the <code>closed</code> state. Default = 0.3.
@property (nonatomic, readonly) CGFloat insetRatio;
/// The direction of the effect. For example if this is <code>true</code> they banner image will go from normal > blurred.
/// If <code>NO</code> the reverse will occur. Default = <code>true</code>.
@property (nonatomic) BOOL effectDirectionOpenToClose;
/// The effect for the banner. Default = RBBannerExtendViewEffectBlur.
@property (nonatomic) enum RBBannerExtendViewEffect effect;
/// The banner image.
@property (nonatomic, strong) UIImage * _Nullable bannerImage;
/// The banner image content mode. Defauilt
@property (nonatomic) UIViewContentMode bannerImageContentMode;
/// The image to use to use for the pull to refresh indicator. Default = <code>arrow-down glyph in dark gray at size 32</code>.
@property (nonatomic, strong) UIImage * _Nullable pullIndicatorImage;
/// The animator to use when animating the pullIndicatorImage. Default = <code>RBAnimator.defaultSpring()</code>.
@property (nonatomic, strong) RBAnimator * _Nonnull pullIndicatorAnimator;
/// The style of the refresh indicator. Default = <code>UIActivityIndicatorViewStyleWhite</code>.
@property (nonatomic) UIActivityIndicatorViewStyle refreshIndicatorViewStyle;
/// Whether or not to allow the extend view to be set to the <code>opened</code> state. In effect allow pull to refresh functionality. Default = <code>true</code>.
/// If you would just like a banner set this to <code>false</code>.
@property (nonatomic) BOOL allowOpening;
/// Creates a new <code>RBBannerExtendView</code> with the given inset ratio.
/// Banners are sized to equal the size of the <code>RBScrollView</code> they are attached to. Note this includes core subclasses such as
/// RBLazyLayoutView, RBLayoutView, RBFormView…
/// The inset ratio determines how much of the banner to reveal by default as a 0 - 1 percentage.
/// By default the <code>openRevealFactor</code> is set to equal 0.3.
/// @param insetRatio   The inset ratio. (0 - 1).
/// @return The newly initialized <code>RBBannerExtendView</code>.
- (nonnull instancetype)initWithInsetRatio:(CGFloat)insetRatio OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)initializeView;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)revealFactorDidChange:(CGFloat)to from:(CGFloat)from;
- (CGFloat)insetBy SWIFT_WARN_UNUSED_RESULT;
- (BOOL)keepExtendedWhenOpen SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldOpen SWIFT_WARN_UNUSED_RESULT;
- (void)didClose;
- (void)didOpen;
/// For subclasses implement this method to modify the banners UI. This is called automatically on changes.
/// All changes and updates should occur here rather than in <code>layoutSubviews</code>.
- (void)performLayout;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// Describes the effect to apply.
typedef SWIFT_ENUM(NSInteger, RBBannerExtendViewEffect, closed) {
/// No effect applied.
  RBBannerExtendViewEffectNone = 0,
/// Blur effect.
  RBBannerExtendViewEffectBlur = 1,
/// Colourize effect. From black & white - > color.
  RBBannerExtendViewEffectColorize = 2,
};

@class RBCellViewButtonSchema;

/// The base class for a lazy layout view cell.
SWIFT_CLASS("_TtC8Redbeard14RBBaseCellView")
@interface RBBaseCellView : UIView
/// The body view of the cell.
@property (nonatomic, readonly, strong) UIView * _Nonnull bodyView;
/// Whether or not the cell is currently highlighted.
@property (nonatomic) BOOL highlighted;
/// Whether or not the left button area is currently open.
@property (nonatomic, readonly) BOOL leftButtonAreaIsOpen;
/// Whether or not the right button area is currently open.
@property (nonatomic, readonly) BOOL rightButtonAreaIsOpen;
/// An array of <code>RBCellViewButtonSchema</code> objects describing the buttons on the left side of the cell.
@property (nonatomic, copy) NSArray<RBCellViewButtonSchema *> * _Nullable leftButtons;
/// An array of <code>RBCellViewButtonSchema</code> objects describing the buttons on the right side of the cell.
@property (nonatomic, copy) NSArray<RBCellViewButtonSchema *> * _Nullable rightButtons;
/// Whether or not the cell is currently enabled and will accept user interaction. Default = <code>YES</code>.
@property (nonatomic, readonly) BOOL enabled;
/// Whether or not the cell is currently selected.  Default = <code>NO</code>.
@property (nonatomic, readonly) BOOL selected;
/// Whether or not this is the ‘alternate’ cell.  Default = <code>NO</code>.
@property (nonatomic) BOOL alternate;
/// The minimum size that the cell will return when asked using <code>sizeThatFits:</code>.  Default = <code>CGSizeZero</code>.
@property (nonatomic) CGSize minimumSize;
/// The maximum size that the cell will return when asked using <code>sizeThatFits:</code>.  Default = <code>CGSizeZero</code>.
@property (nonatomic) CGSize maximumSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)initializeView;
- (void)didMoveToSuperview;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)populateBodyView:(UIView * _Nonnull)bodyView;
/// Called when laying out the subviews of the cell.  Use this method to set the
/// frames of the subviews in the <code>bodyView</code>.
/// @param bodyView The body view of the cell.
- (void)layoutBodyView:(UIView * _Nonnull)bodyView;
/// Called when applying a theme to the cell.  Use this method to apply the theme
/// to the subviews of the <code>bodyView</code>.
/// @param theme    The body theme dictionary.
/// @param bodyView The body view of the cell.
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme toBodyView:(UIView * _Nonnull)bodyView;
/// Called to determine the desired size of the body view.
/// @param size The available size in the container for the cell body.
/// @return The desired cell body size.
- (CGSize)bodyViewSizeThatFitsSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
@end

@class RBPositioner;

/// A delegate to receive positioner events.
SWIFT_PROTOCOL("_TtP8Redbeard20RBPositionerDelegate_")
@protocol RBPositionerDelegate <NSObject>
/// Called when the layout has been invalidated and a recalculation of the layout is needed.
/// @param positioner The positioner that has had it’s layout invalidated.
- (void)positionerWasInvalidatedWithPositioner:(RBPositioner * _Nonnull)positioner;
@end

@class RBObserverCollection;
@class UITouch;
@class UIEvent;

/// A <code>UIScrollView</code> with extensions.
SWIFT_CLASS("_TtC8Redbeard12RBScrollView")
@interface RBScrollView : UIScrollView <UIScrollViewDelegate>
/// A collection of <code>RBScrollViewObserver</code> objects to receive scroll view events.
@property (nonatomic, readonly, strong) RBObserverCollection * _Nonnull observers;
/// Whether or not the scroll view should force scroll to be enabled - even if it’s not required
/// to access the content.  Such as when you need a pull-to-refresh.
@property (nonatomic) BOOL shouldForceScrollEnabled;
@property (nonatomic, strong) RBExtendView * _Nullable topExtendView;
@property (nonatomic, strong) RBExtendView * _Nullable bottomExtendView;
@property (nonatomic, strong) RBExtendView * _Nullable leftExtendView;
@property (nonatomic, strong) RBExtendView * _Nullable rightExtendView;
@property (nonatomic, readonly) BOOL haveExtendViews;
@property (nonatomic, strong) id <UIScrollViewDelegate> _Nullable delegate;
@property (nonatomic) UIEdgeInsets scrollIndicatorInsets;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic) CGPoint contentOffset;
- (void)initializeView;
@property (nonatomic) CGRect frame;
- (void)layoutSubviews;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (BOOL)touchesShouldCancelInContentView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// The current vector of change in the current scroll.
@property (nonatomic, readonly) CGVector currentScrollVector;
/// The vector of change in the previous scroll operation.
@property (nonatomic, readonly) CGVector lastScrollUpdateVector;
/// The frame within the content that is currently in view (in the viewport).
@property (nonatomic, readonly) CGRect visibleContentFrame;
/// The frame within the bounds where the content is visible.
@property (nonatomic, readonly) CGRect contentViewport;
- (void)viewportDidChangeFrom:(CGRect)previousViewport to:(CGRect)viewport;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (BOOL)scrollViewShouldScrollToTop:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScrollToTop:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView;
/// Sets an extend view for a specific position. Note extend views manage and set <code>contentInsets</code> and <code>contentOffsets</code>.
- (void)setExtendViewWithExtendView:(RBExtendView * _Nullable)extendView position:(enum RBExtendViewPosition)position;
- (void)extendEndEvent;
/// Called when the scroll view is tapped anywhere.
- (void)scrollViewWasTapped;
/// Called when a scroll operation will begin.
/// @param origin The content origin at the start of the scroll operation.
- (void)willBeginScrollAtOrigin:(CGPoint)origin;
/// Called when the scroll operation did update to the given content offset.
/// @param origin     The current content offset of the scroll operation.
/// @param fromOrigin The original content offset of the scroll operation.
- (void)didScrollToOrigin:(CGPoint)origin fromOrigin:(CGPoint)fromOrigin;
/// Called when the user stopped the dragging interaction part of the scroll.
/// @param willDecelerate Whether or not the scroll will continue in deceleration mode.
- (void)didEndDragging:(BOOL)willDecelerate;
/// Called when a scroll operation has finished.
/// @param origin     The final content offset of the scroll operation.
/// @param fromOrigin The original content offset of the scroll operation.
- (void)didFinishScrollToOrigin:(CGPoint)origin fromOrigin:(CGPoint)fromOrigin;
- (void)visibleContentFrameDidChange;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class RBLayoutAnimator;
@class RBFragmentedArray;
enum RBBaseLayoutViewScrollPosition : NSInteger;

/// The abstract base class for layout views.
SWIFT_CLASS("_TtC8Redbeard16RBBaseLayoutView")
@interface RBBaseLayoutView : RBScrollView <RBPositionerDelegate>
/// Whether or not a schema based is supported by this layout.
@property (nonatomic, readonly) BOOL supportsSchemaBasedPositioners;
/// The positioner that determines how the cells are positioned and sized.
@property (nonatomic, strong) RBPositioner * _Nonnull positioner;
/// The animator to animate cells as they appear and disappear.
@property (nonatomic, strong) RBLayoutAnimator * _Nullable animator;
/// Whether or not animation should occur during scrolling only. Default = <code>true</code>.
@property (nonatomic) BOOL animateScrollOnly;
/// An array of the cells that are currently visible.
@property (nonatomic, strong) RBFragmentedArray * _Nonnull visibleCells;
/// Whether or not an appearing or disappearing cell should animate.
@property (nonatomic, readonly) BOOL shouldAnimate;
/// Whether or not scrolling should be disabled. Override this to disable scrolling while you
/// perform an update.
@property (nonatomic, readonly) BOOL shouldDisableScrolling;
/// Indicates whether or not laying out cells, reloadData, reloadCellAt and changes to viewports
/// will update the view.
@property (nonatomic, readonly) BOOL layoutUpdatesPaused;
/// The frame of the cell at the given index.
/// @param index The index of the cell.
/// @return The frame of the cell or <code>CGRectNull</code> if a cell with the requested index does not exist.
- (CGRect)cellFrameAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) CGSize contentSize;
@property (nonatomic) UIEdgeInsets contentInset;
- (void)layoutSubviews;
- (void)childViewFrameDidInvalidate:(UIView * _Nonnull)childView requiresImmediateLayout:(BOOL)requiresImmediateLayout;
@property (nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
/// Scroll to the given cell index.
/// @param index        The index of the cell.
/// @param position     The position of the cell.
/// @param orientation  The orientation of the scrolling movement.
/// @param offset       An additional offset to apply to the scroll position.
/// @param animated     Animate the scrolling.
- (void)scrollToCellAt:(NSInteger)index position:(enum RBBaseLayoutViewScrollPosition)position orientation:(RBOrientation)orientation offset:(CGFloat)offset animated:(BOOL)animated;
/// Pauses layout updates to the view. Useful if doing custom animations etc.
- (void)pauseLayoutUpdates;
/// Resumes any pending or updates to the view.
- (void)resumeLayoutUpdates;
/// Called when a cell will be positioned with a new frame.
/// @param view  The view of the cell.
/// @param index The index of the cell in the layout view.
/// @param frame The new frame being applied to the cell.
- (void)cellWillPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell was positioned with a new frame.
/// @param view  The view of the cell.
/// @param index The index of the cell in the layout view.
/// @param frame The new frame being applied to the cell.
- (void)cellDidPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell will appear.
/// @param view  The view of the cell.
/// @param index The index of the cell in the layout view.
/// @param frame The frame that the cell is appearing with.
- (void)cellWillAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell did appear.
/// @param view  The view of the cell.
/// @param index The index of the cell in the layout view.
/// @param frame The frame that the cell is appearing with.
- (void)cellDidAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell will disappear.
/// @param view  The view of the cell.
/// @param index The index of the cell in the layout view.
- (void)cellWillDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
/// Called when a cell did disappear.
/// @param view  The view of the cell.
/// @param index The index of the cell in the layout view.
- (void)cellDidDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
- (void)positionerWasInvalidatedWithPositioner:(RBPositioner * _Nonnull)positioner;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The position to scroll to.
typedef SWIFT_ENUM(NSInteger, RBBaseLayoutViewScrollPosition, closed) {
/// Scroll to position the cell at the start. Which is the top if orientation is vertical or the left if horizontal.
  RBBaseLayoutViewScrollPositionStart = 0,
/// Scroll to position the cell in the middle depending on orientation.
  RBBaseLayoutViewScrollPositionMiddle = 1,
/// Scroll to position the cell at the end. Which is the bottom if orientation is vertical or the right if horizontal.
  RBBaseLayoutViewScrollPositionEnd = 2,
};

@class RBLabel;
@class RBImageView;

/// A simple cell that provides a label and image much like a button. Used by <code>RBMultipleChoiceView</code> and <code>RBMenuView</code>.
SWIFT_CLASS("_TtC8Redbeard16RBButtonCellView")
@interface RBButtonCellView : RBBaseCellView
/// The label.
@property (nonatomic, readonly, strong) RBLabel * _Nonnull titleLabel;
/// The image.
@property (nonatomic, readonly, strong) RBImageView * _Nonnull imageView;
/// Whether or not the image and title should be vertically or horizontally arranged.
/// Default = <code>RBOrientationHorizontal</code>.
@property (nonatomic) RBOrientation orientation;
/// Whether or not the title should be before the image. Default = <code>NO</code>.
@property (nonatomic) BOOL titleFirst;
/// The spacing to use between the label and the image. This has the effect of increasing
/// the size of the button in the direction set via the <code>orientation</code> property. Default = <code>0</code>.
@property (nonatomic) CGFloat spacing;
/// The image to on the imageView.
@property (nonatomic, strong) UIImage * _Nonnull image;
/// The title to set on the titleLabel.
@property (nonatomic, copy) NSString * _Nonnull title;
- (void)populateBodyView:(UIView * _Nonnull)bodyView;
- (void)layoutBodyView:(UIView * _Nonnull)bodyView;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layout;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme toBodyView:(UIView * _Nonnull)bodyView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A task that can be cancelled.
SWIFT_PROTOCOL("_TtP8Redbeard17RBCancellableTask_")
@protocol RBCancellableTask
/// Cancel the task.
- (void)cancel;
@end


/// A task that executes a block and allows cancellation before execution.
SWIFT_CLASS("_TtC8Redbeard22RBCancellableBlockTask")
@interface RBCancellableBlockTask : NSObject <RBCancellableTask>
/// The block to be executed.
@property (nonatomic, readonly, copy) void (^ _Nonnull taskBlock)(void);
/// Whether the task has been cancelled.
@property (nonatomic, readonly) BOOL cancelled;
/// Whether the task has been started.
@property (nonatomic, readonly) BOOL started;
/// Whether the task has been completed.
@property (nonatomic, readonly) BOOL finished;
/// Initializes a new task with the given block.
/// @param taskBlock The block to execute.
/// @return The initialized object.
- (nonnull instancetype)initWithTaskBlock:(void (^ _Nonnull)(void))taskBlock OBJC_DESIGNATED_INITIALIZER;
- (void)cancel;
/// Starts the task by executing the block.
/// @return Whether the task was started successfully.
- (BOOL)start SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



/// A caching protocol for <code>Data</code> objects.
SWIFT_PROTOCOL("_TtP8Redbeard11RBDataCache_")
@protocol RBDataCache <NSObject>
/// Store a data item in the cache.
/// @param dataItem       The <code>Data</code> object.
/// @param key            The unique key to store the data with.
/// @param expiryInterval The time span after which the data is expired and removed.
/// @return Whether or not the data item was stored.
- (BOOL)storeDataItem:(NSData * _Nonnull)dataItem key:(NSString * _Nonnull)key expiryInterval:(NSTimeInterval)expiryInterval SWIFT_WARN_UNUSED_RESULT;
/// Store a data item in the cache.
/// @param dataItem       The <code>Data</code> object.
/// @param key            The unique key to store the data with.
/// @param group          The group name to store the data in.
/// @param expiryInterval The time span after which the data is expired and removed.
/// @return Whether or not the data item was stored.
- (BOOL)storeDataItem:(NSData * _Nonnull)dataItem key:(NSString * _Nonnull)key group:(NSString * _Nonnull)group expiryInterval:(NSTimeInterval)expiryInterval SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not a data item is stored with the given key.
/// @param key The key for which to check if there is a data item stored.
/// @return Whether a data item was found with the key.
- (BOOL)dataItemExistsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not a data item is stored with the given key and group.
/// @param key   The key for which to check if there is a data item stored.
/// @param group The group to use to check if there is a data item stored.
/// @return Whether a data item was found with the given key and group.
- (BOOL)dataItemExistsWithKey:(NSString * _Nonnull)key withGroup:(NSString * _Nonnull)group SWIFT_WARN_UNUSED_RESULT;
/// Remove the data item stored with the given key.
/// @param key The key to remove the stored data item for.
- (void)removeDataItemWithKey:(NSString * _Nonnull)key;
/// Remove the data item stored with the given key.
/// @param key   The key to remove the stored data item for.
/// @param group The group to remove the stored data item for.
- (void)removeDataItemWithKey:(NSString * _Nonnull)key withGroup:(NSString * _Nonnull)group;
/// Remove all of the items stored in the given group.
/// @param group The group for which to remove all stored data items.
- (void)removeAllItemsWithGroup:(NSString * _Nonnull)group;
/// Removes all data items that have expired.
- (void)removeAllExpiredItems;
@end


/// A managed memory cache for <code>Data</code> objects.
SWIFT_CLASS("_TtC8Redbeard17RBDataMemoryCache")
@interface RBDataMemoryCache : NSObject <RBDataCache>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultMaximumMemoryCacheSize;)
+ (NSInteger)defaultMaximumMemoryCacheSize SWIFT_WARN_UNUSED_RESULT;
/// The maximum size that the cache can be in bytes.
@property (nonatomic, readonly) NSInteger maximumCacheSizeInBytes;
/// The current size of the cache.
@property (nonatomic, readonly) NSInteger cacheSizeInBytes;
/// Creates a new cache with the given maximum size.
/// @param maximumCacheSizeInBytes The maximum size that the cache can be in bytes.
/// @return The new cache object.
- (nonnull instancetype)initWithMaximumCacheSize:(NSInteger)maximumCacheSizeInBytes OBJC_DESIGNATED_INITIALIZER;
- (BOOL)storeDataItem:(NSData * _Nonnull)dataItem key:(NSString * _Nonnull)key expiryInterval:(NSTimeInterval)expiryInterval SWIFT_WARN_UNUSED_RESULT;
- (BOOL)storeDataItem:(NSData * _Nonnull)dataItem key:(NSString * _Nonnull)key group:(NSString * _Nonnull)group expiryInterval:(NSTimeInterval)expiryInterval SWIFT_WARN_UNUSED_RESULT;
- (BOOL)dataItemExistsWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)dataItemExistsWithKey:(NSString * _Nonnull)key withGroup:(NSString * _Nonnull)group SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)fetchDataItemWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)fetchDataItemWithKey:(NSString * _Nonnull)key withGroup:(NSString * _Nonnull)group SWIFT_WARN_UNUSED_RESULT;
- (void)removeDataItemWithKey:(NSString * _Nonnull)key;
- (void)removeDataItemWithKey:(NSString * _Nonnull)key withGroup:(NSString * _Nonnull)group;
/// Remove all of the items stored in the given group.
/// @param group The group for which to remove all stored data items.
- (void)removeAllItemsWithGroup:(NSString * _Nonnull)group;
/// Removes all data items that have expired.
- (void)removeAllExpiredItems;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// An observer of changes to the device orientation.
SWIFT_PROTOCOL("_TtP8Redbeard27RBDeviceOrientationObserver_")
@protocol RBDeviceOrientationObserver <NSObject>
@optional
/// Called when the orientation of the device changed.
/// @param deviceOrientation The new device orientation.
/// @param isLandscape       Whether or not the new orientation is a landscape orientation.
/// @param isPortrait        Whether or not the new orientation is a portrait orientation.
- (void)deviceOrientationDidChangeTo:(UIDeviceOrientation)deviceOrientation isLandscape:(BOOL)isLandscape isPortrait:(BOOL)isPortrait;
@end

typedef SWIFT_ENUM(NSInteger, RBDeviceSizeProfile, closed) {
  RBDeviceSizeProfileUnknown = 0,
  RBDeviceSizeProfileSmall = 1,
  RBDeviceSizeProfileMedium = 2,
  RBDeviceSizeProfileLarge = 3,
};


/// Represents an email attachment
SWIFT_CLASS("_TtC8Redbeard17RBEmailAttachment")
@interface RBEmailAttachment : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A social sharing service.  This is an abstract class.
SWIFT_CLASS("_TtC8Redbeard16RBSharingService")
@interface RBSharingService : NSObject
/// The Email social sharing service.
/// @return The service object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RBSharingService * _Nonnull email;)
+ (RBSharingService * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// The Twitter social sharing service.
/// @return The service object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RBSharingService * _Nonnull twitter;)
+ (RBSharingService * _Nonnull)twitter SWIFT_WARN_UNUSED_RESULT;
/// The Facebook social sharing service.
/// @return The service object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RBSharingService * _Nonnull facebook;)
+ (RBSharingService * _Nonnull)facebook SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MFMailComposeViewController;

/// The Email social sharing service.
SWIFT_CLASS("_TtC8Redbeard21RBEmailSharingService")
@interface RBEmailSharingService : RBSharingService <MFMailComposeViewControllerDelegate>
- (void)mailComposeController:(MFMailComposeViewController * _Nonnull)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RBEventListener;

/// The global events center.
SWIFT_CLASS("_TtC8Redbeard13RBEventCenter")
@interface RBEventCenter : NSObject
/// Register an object as a listener for an event.
/// @param listener  An object that implements <code>RBEventListener</code>.
/// @param event The name of the event to be notified of.
+ (void)register:(id <RBEventListener> _Nonnull)listener forEvent:(NSString * _Nonnull)event;
/// Unregister an object as a listener for an event.
/// @param listener  The currently registered listener for the event.
/// @param event The name of the event to stop being notified of.
+ (void)unregisterListener:(id <RBEventListener> _Nonnull)listener forEvent:(NSString * _Nonnull)event;
/// Unregister an object as a listener for all events.
/// @param listener  The currently registered listener for one or more events.
+ (void)unregisterListener:(id <RBEventListener> _Nonnull)listener;
/// Raise an event.
/// @param event                 The name of the event to raise.
/// @param sender                The object that raised the event.
/// @param data                  User data to provide to listeners of the event.
/// @param handleSynchronously   Whether the listeners will be informed synchronously (<code>true</code>) or simultaneously (<code>false</code>).
/// @param completion            The completion block to be called when the event has been handled.
+ (void)raiseEventWithName:(NSString * _Nonnull)event withSender:(id _Nullable)sender withData:(id _Nullable)data handleSynchronously:(BOOL)handleSynchronously completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Listens for global events.
SWIFT_PROTOCOL("_TtP8Redbeard15RBEventListener_")
@protocol RBEventListener <NSObject>
/// Receives and handles a raised event.
/// @param eventName  The name of the event raised.
/// @param sender     The object that raised the event.
/// @param data       The user data associated with the event.
/// @param completion The completion that must be called when the event has been handled.
- (void)event:(NSString * _Nonnull)eventName wasRaisedBy:(id _Nullable)sender withData:(id _Nullable)data completion:(SWIFT_NOESCAPE void (^ _Nonnull)(void))completion;
@end



/// A delegate to receive <code>RBExtendView</code> events.
SWIFT_PROTOCOL("_TtP8Redbeard20RBExtendViewDelegate_")
@protocol RBExtendViewDelegate <NSObject>
@optional
/// Called to notify that the extend view will open.
/// @param extendView          The extend view that will open.
- (void)extendViewWillOpen:(RBExtendView * _Nonnull)extendView;
/// Called to notify that the extend view did open.
/// @param extendView          The extend view that did open.
- (void)extendViewDidOpen:(RBExtendView * _Nonnull)extendView;
/// Called to notify that the extend view will close.
/// @param extendView          The extend view that will close.
- (void)extendViewWillClose:(RBExtendView * _Nonnull)extendView;
/// Called to notify that the extend view did close.
/// @param extendView          The extend view that did close.
- (void)extendViewDidClose:(RBExtendView * _Nonnull)extendView;
/// Called to notify changes in the reveal factor for the extend view.
/// @param extendView          The extend view being revealed.
/// @param revealFactor        The factor by which the extend view is revealed. 0 - 1.
- (void)extendView:(RBExtendView * _Nonnull)extendView didRevealByFactor:(CGFloat)revealFactor;
@end

/// The position of an extend view.
typedef SWIFT_ENUM(NSInteger, RBExtendViewPosition, closed) {
/// Positioned at the top.
  RBExtendViewPositionTop = 0,
/// Positioned at the bottom.
  RBExtendViewPositionBottom = 1,
/// Positioned to the left.
  RBExtendViewPositionLeft = 2,
/// Positioned to the right.
  RBExtendViewPositionRight = 3,
};

/// The state of an extend view.
typedef SWIFT_ENUM(NSInteger, RBExtendViewState, closed) {
/// The closed state.
  RBExtendViewStateClosed = 0,
/// The opended state.
  RBExtendViewStateOpened = 1,
/// The opening state.
  RBExtendViewStateOpening = 2,
/// The closing state.
  RBExtendViewStateClosing = 3,
};


/// The Facebook social sharing service.
SWIFT_CLASS("_TtC8Redbeard24RBFacebookSharingService")
@interface RBFacebookSharingService : RBSharingService
- (BOOL)composeWithText:(NSString * _Nonnull)text completion:(void (^ _Nullable)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RBFileChangeMonitorResult;

/// Detects changes in a set of files.
SWIFT_CLASS("_TtC8Redbeard19RBFileChangeMonitor")
@interface RBFileChangeMonitor : NSObject
/// The unique storage key for this file change monitor. Checksums are stored here.
@property (nonatomic, readonly, copy) NSString * _Nonnull storageKey;
/// Initializes a new file change monitor with the given unique storage key. Checksums are stored in UserDefaults.
/// @param storageKey The unique storage key to use when determining where to store the checksums. Checksums are stored in UserDefaults using storage key.
/// @return The initialized object.
- (nonnull instancetype)initWithStorageKey:(NSString * _Nonnull)storageKey OBJC_DESIGNATED_INITIALIZER;
/// Saves internally tracked changes if there are any.
- (void)saveChecksums;
/// Checks for changes to the given files and internally tracks the changes. You may call <code>saveChecksums</code> after calling this method to
/// save the internally tracked values.
/// @param fileUrls         The URLs to the files to check for changes in.
/// @return Whether or not any changes were detected.
- (RBFileChangeMonitorResult * _Nonnull)checkIfChangesOccurredInFiles:(NSArray<NSURL *> * _Nonnull)fileUrls SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Stores the outcome of a RBFileChangeMonitor file check.
SWIFT_CLASS("_TtC8Redbeard25RBFileChangeMonitorResult")
@interface RBFileChangeMonitorResult : NSObject
/// Whether or not any changes were detected.
@property (nonatomic, readonly) BOOL modified;
/// The files that were new.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull newFiles;
/// The files that were modified.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull modifiedFiles;
/// The files that were removed.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull removedFiles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Filesystem convenience methods.
SWIFT_CLASS("_TtC8Redbeard12RBFilesystem")
@interface RBFilesystem : NSObject
/// Gets the local filesystem path to the given system directory.
/// @param pathDirectory The system directory.
/// @return The retrieved path.
+ (NSString * _Nullable)pathWithPathDirectory:(NSSearchPathDirectory)pathDirectory SWIFT_WARN_UNUSED_RESULT;
/// The path to the documents directory.
+ (NSString * _Nonnull)pathToDocumentsDirectory SWIFT_WARN_UNUSED_RESULT;
/// The path to the temporary directory.
+ (NSString * _Nonnull)pathToTemporaryDirectory SWIFT_WARN_UNUSED_RESULT;
/// The path to the bundle directory.
+ (NSString * _Nonnull)pathToBundleDirectory SWIFT_WARN_UNUSED_RESULT;
/// The path to the cache directory.
+ (NSString * _Nonnull)pathToCacheDirectory SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a list of the files at the path given that match the given extension. Excludes directories.
/// @param path             The path to retrieve the list of files from.
/// @param includeFullPaths Whether each item should include the full path, or just the name.
/// @param extension        Optional extension to match. (Assumes no <code>.</code> (dot))
/// @return The <code>Array</code> file list.
+ (NSArray<NSString *> * _Nonnull)filesWithPath:(NSString * _Nonnull)path includeFullPaths:(BOOL)includeFullPaths extension:(NSString * _Nullable)extension SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a list of the directories at the path given.
/// @param path             The path to retrieve the list of directories from.
/// @param includeFullPaths Whether each item should include the full path, or just the name.
/// @return The <code>Array</code> directory list.
+ (NSArray<NSString *> * _Nullable)directoriesWithPath:(NSString * _Nonnull)path includeFullPaths:(BOOL)includeFullPaths SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not a file exists at the given path.
/// @param path The path to the file.
/// @return Whether or not the file exists.
+ (BOOL)fileExistsWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not a directory exists at the given path.
/// @param path The path to the directory.
/// @return Whether or not the directory exists.
+ (BOOL)directoryExistsWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Creates a directory at the given path.
/// @param path The path to create a directory at.
/// @return Whether or not the operation was successful.
+ (BOOL)createDirectoryWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Gets the modified date of the item at the given path.
/// @param path The path to the item.
/// @return The <code>Date</code> result.
+ (NSDate * _Nullable)modifiedDateWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Removes the file at the given path.
/// @param path The path to the file to remove.
/// @return Whether or not the operation was successful.
+ (BOOL)removeFileWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Reads data from the disk asynchronously.
/// @param queue       The dispatch queue, pass nil to use main dispatch queue.
/// @param path        The path to the item to read.
/// @param filterBlock An optional block to filter the data.
/// @param completion  The completion block providing the result on completion.
/// @return A task handle that can be used to cancel the operation.
+ (id <RBCancellableTask> _Nonnull)readDataOnceWithQueue:(dispatch_queue_t _Nullable)queue path:(NSString * _Nonnull)path filterBlock:(NSData * _Nonnull (^ _Nullable)(NSData * _Nonnull))filterBlock completion:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RBPositionerResult;

SWIFT_CLASS("_TtC8Redbeard12RBPositioner")
@interface RBPositioner : NSObject <RBThemeTrackerDelegate>
/// <ul>
///   <li>
///     The theming tracker object for the view.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) RBThemeTracker * _Nonnull theme;
/// The delegate of the positioner, to receive the position invalidation event (causing a relayout).
@property (nonatomic, weak) id <RBPositionerDelegate> _Nullable delegate;
/// The spacing between cells in the positioner.
/// A positioner should attempt to respect this as much as is possible.
/// Depending on the positioner it may be ignored e.g. RBFlexiPositioner.
@property (nonatomic) CGFloat spacing;
/// The margin that should be provided around the collective cell bounds.
@property (nonatomic) UIEdgeInsets margin;
/// The minimum size that the layout view will size to when <code>sizeThatFits:</code> is called.
@property (nonatomic) CGSize minimumSize;
/// The maximum size that the layout view will size to when <code>sizeThatFits:</code> is called.
/// Note this is particularly useful when you have multiple embedded <code>RBLayoutView</code>s that have
/// expanding positioners (e.g. <code>RBGridPositioner</code>). These in specific configurations
/// attempt to expand the cell size and layout to consume all available space as a viewport of
/// 1000000 maybe passed to the embedded <code>RBLayoutView</code> it may need to be restricted via the
/// maximumSize property.
@property (nonatomic) CGSize maximumSize;
/// The content size required when there are no cells in the layout view.
@property (nonatomic) CGSize emptyContentSize;
/// The available viewport size for the positioning the cells.
@property (nonatomic) CGSize viewportSize;
/// The content insets that are applied to the viewport.
@property (nonatomic) UIEdgeInsets contentInsets;
/// Whether or not the current result is invalid and the positioner needs to perform a layout.
@property (nonatomic, readonly) BOOL needsLayout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The result of the last positioning operation.
@property (nonatomic, readonly, strong) RBPositionerResult * _Nullable result;
/// Invalidates the current result, prompting a relayout.
- (void)invalidate;
/// Whether or not the given change of the content insets should invalidate the layout,
/// causing a repositioning.
/// @param from The original content insets.
/// @param to   The new content insets.
/// @return Whether or not the layout should be invalidated. Default = <code>true</code>
- (BOOL)shouldInvalidateDueToContentInsetsFrom:(UIEdgeInsets)from to:(UIEdgeInsets)to SWIFT_WARN_UNUSED_RESULT;
/// Performs a recalculation of the layout.
/// @param numberOfViews    The number of cells to position.
/// @param viewPort         The available viewport size.
/// @param sizeBlock        A block that can be called to get the recommended size of a cell given an available container size.
/// @return The result of the recalculation of the layout.
- (RBPositionerResult * _Nonnull)calculateWithNumberOfViews:(NSInteger)numberOfViews viewPort:(CGSize)viewPort sizeBlock:(SWIFT_NOESCAPE CGSize (^ _Nonnull)(NSInteger, CGSize))sizeBlock SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
+ (CGSize)sizeOfPositioner:(RBPositioner * _Nonnull)positioner views:(NSArray<UIView *> * _Nonnull)views size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
+ (void)positionWithPositioner:(RBPositioner * _Nonnull)positioner views:(NSArray<UIView *> * _Nonnull)views parent:(UIView * _Nonnull)parent frame:(CGRect)frame animator:(RBAnimator * _Nullable)animator completion:(void (^ _Nullable)(CGSize))completion;
@end

@protocol RBSchemaPositionerDelegate;
@class RBSchemaPositionerSchema;

/// A positioner that uses a passed in schema (meta data concerning specific views) and
/// the <code>UIView</code>’s described by the schema.
/// When using a <code>RBSchemaPositioner</code> certain layout views methods such as
/// pushCell, insertCellAtIndex etc can-not be called an exception will be thrown if the
/// attempt is made.
SWIFT_CLASS("_TtC8Redbeard18RBSchemaPositioner")
@interface RBSchemaPositioner : RBPositioner
/// The delegate of the positioner, to receive a positioner schema event to add or remove cells.
@property (nonatomic, weak) id <RBSchemaPositionerDelegate> _Nullable schemaDelegate;
/// The schema that holds the views and layout data for the positioner.
@property (nonatomic, readonly, strong) RBSchemaPositionerSchema * _Null_unspecified schema;
/// Initializes a new <code>RBSchemaPositioner</code> using the supplied schema.
/// @param schema       The schema to use.
/// @return The initialized positioner.
- (nonnull instancetype)initWithSchema:(RBSchemaPositionerSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Removes all existing views on the positioners by calling the schemaDelegates popAllCells method and then adds
/// the all the views obtained via the schemas views property.
/// This is called automatically if the schema is changed or the positioner is added to a layout view.
/// Do not call this directly it is used internally only.
- (void)resetViews;
@end


/// A flexible grid based positioner that provides the ability to specifically size and layout items based on a wide variety of criteria.
/// <ul>
///   <li>
///     Rows do not need to contain similar numbers of cells.
///   </li>
///   <li>
///     Autosize cells or rows to match contents.
///   </li>
///   <li>
///     Automatically grow cells and rows to take up unused space.
///   </li>
///   <li>
///     Set the size of cells and rows by pt or as a percentage.
///   </li>
///   <li>
///     Set cells or rows to be empty.
///   </li>
///   <li>
///     Provide minimum, maximum values for rows and cells as pt or percentage.
///   </li>
///   <li>
///     Anchor content within cells horizontally, vertically or both.
///   </li>
///   <li>
///     Expand content within cells to utilise available space horizontally, vertically or both.
///   </li>
///   <li>
///     Provide margins and spacing values.
///   </li>
///   <li>
///     Overlaps cells onto a specified rows underneath.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8Redbeard17RBFlexiPositioner")
@interface RBFlexiPositioner : RBSchemaPositioner
/// Returns the number of cells that contain content and hence are not empty.
@property (nonatomic, readonly) NSInteger nonEmptyCellCount;
- (nonnull instancetype)initWithStringRows:(NSArray<NSArray<NSString *> *> * _Nonnull)stringRows views:(NSArray<UIView *> * _Nonnull)views OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (RBPositionerResult * _Nonnull)calculateWithNumberOfViews:(NSInteger)numberOfViews viewPort:(CGSize)viewPort sizeBlock:(SWIFT_NOESCAPE CGSize (^ _Nonnull)(NSInteger, CGSize))sizeBlock SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSchema:(RBSchemaPositionerSchema * _Nonnull)schema SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC8Redbeard24RBSchemaPositionerSchema")
@interface RBSchemaPositionerSchema : NSObject
/// An array of <code>UIView</code> objects in the order that they should be added to a view.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull views;
/// Initializes a new schema positioner.
/// @param views                  The views that are referenced by the schema in the order that they should be added to a view.
/// @param configuration          Optional configuration that a positioner may require.
/// @return The initialized layout view positioning result.
- (nonnull instancetype)initWithViews:(NSArray<UIView *> * _Nonnull)views configuration:(id _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Describes the sizing and layout for a <code>RBFlexiPositioner</code>.
SWIFT_CLASS("_TtC8Redbeard23RBFlexiPositionerSchema")
@interface RBFlexiPositionerSchema : RBSchemaPositionerSchema
@property (nonatomic) NSInteger nonEmptyCellCount;
- (nonnull instancetype)initWithStringRows:(NSArray<NSArray<NSString *> *> * _Nonnull)stringRows views:(NSArray<UIView *> * _Nonnull)views;
- (nonnull instancetype)initWithViews:(NSArray<UIView *> * _Nonnull)views configuration:(id _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Redbeard16RBFlowPositioner")
@interface RBFlowPositioner : RBPositioner
/// Whether or not the cells should fit to their fixed edge (width if vertical orientation, height if horizontal orientation). Default = <code>false</code>.
@property (nonatomic) BOOL fitToFixedEdge;
- (BOOL)shouldInvalidateDueToContentInsetsFrom:(UIEdgeInsets)from to:(UIEdgeInsets)to SWIFT_WARN_UNUSED_RESULT;
- (RBPositionerResult * _Nonnull)calculateWithNumberOfViews:(NSInteger)numberOfViews viewPort:(CGSize)viewPort sizeBlock:(SWIFT_NOESCAPE CGSize (^ _Nonnull)(NSInteger, CGSize))sizeBlock SWIFT_WARN_UNUSED_RESULT;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RBFormSchema;
@class RBPresentationAnimator;

/// A schema to describe a managed form alert. Corresponds to setting up a <code>RBFormAlertViewController</code>.
SWIFT_CLASS("_TtC8Redbeard17RBFormAlertSchema")
@interface RBFormAlertSchema : NSObject
/// The submit button identifier for a form alert. You may use this in the <code>setButtons:</code> method. Using this value will provide a button that will submit the form when pressed. The value of this is = ‘cancelButton’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cancelButtonIdentifier;)
+ (NSString * _Nonnull)cancelButtonIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The cancel button identifier for a form alert. You may use this in the <code>setButtons:</code> method. Using this value will provide a button that will cancel the form when pressed. The value of this is = ‘submitButton’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull submitButtonIdentifier;)
+ (NSString * _Nonnull)submitButtonIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The schema of the managed form that will be presented.
@property (nonatomic, strong) RBFormSchema * _Nullable formSchema;
/// The titles of the buttons on the form alert.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull buttonTitles;
/// The identifiers of the buttons on the form alert.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull buttonIdentifiers;
/// Whether or not the alignment specified in this schema should be used
/// rather than the default value on the presenting view controller. Default = NO.
@property (nonatomic) BOOL shouldUseSchemaAlignment;
/// The vertical alignment to use when positioning the form alert view.
@property (nonatomic) RBVerticalAlignment alignment;
/// Whether or not the margin specified by this schema should be used
/// rather than the default value on the presenting view controller.
@property (nonatomic) BOOL shouldUseSchemaMargin;
/// The margin to use around the outside of the form alert view when
/// positioning it within the presenting view controller.
@property (nonatomic) UIEdgeInsets margin;
/// The animator to use when animating the presentation and dismissal transitions.
@property (nonatomic, strong) RBPresentationAnimator * _Nullable animator;
/// Whether or not the first editable field should be automatically
/// selected (opening the input view) when the form alert is opening. Default = NO.
@property (nonatomic) BOOL shouldOpenFirstFieldForEditing;
/// The identifier of the theme to apply to the managed alert form prior to presenting it.
@property (nonatomic, copy) NSString * _Nullable themeIdentifier;
/// Theme values to apply after any other prior theming has been applied.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable themeOverrides;
/// Defines the buttons that will be provided. By default a functioning submit and cancel button are provided.
/// @param identifiers  The unique identifier for each button. Note you may use the pre-defined identifier constants in <code>RBFormAlertViewController</code> i.e. <code>submitButtonIdentifier</code> -> ‘submitButton’ and <code>cancelButtonIdentifier</code> -> ‘cancelButton’ to easily add submit and cancel buttons that call the <code>submitForm</code> and <code>cancelFrom</code> methods on the managed form.
/// @param titles       The buttons titles.
- (void)setButtons:(NSArray<NSString *> * _Nonnull)identifiers withTitles:(NSArray<NSString *> * _Nonnull)titles;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A delegate to be informed of cell positioning and appearance events.
SWIFT_PROTOCOL("_TtP8Redbeard20RBLayoutViewDelegate_")
@protocol RBLayoutViewDelegate <NSObject>
@optional
/// Called when a cell will be positioned with a new frame.
/// @param layoutView The layout view object.
/// @param view       The view of the cell.
/// @param index      The index of the cell in the layout view.
/// @param frame      The new frame being applied to the cell.
- (void)layoutView:(RBBaseLayoutView * _Nonnull)layoutView cellWillPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell was positioned with a new frame.
/// @param layoutView The layout view object.
/// @param view       The view of the cell.
/// @param index      The index of the cell in the layout view.
/// @param frame      The new frame being applied to the cell.
- (void)layoutView:(RBBaseLayoutView * _Nonnull)layoutView cellDidPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell will appear.
/// @param layoutView The layout view object.
/// @param view       The view of the cell.
/// @param index      The index of the cell in the layout view.
/// @param frame      The frame that the cell is appearing with.
- (void)layoutView:(RBBaseLayoutView * _Nonnull)layoutView cellWillAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell did appear.
/// @param layoutView The layout view object.
/// @param view       The view of the cell.
/// @param index      The index of the cell in the layout view.
/// @param frame      The frame that the cell is appearing with.
- (void)layoutView:(RBBaseLayoutView * _Nonnull)layoutView cellDidAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
/// Called when a cell will disappear.
/// @param layoutView The layout view object.
/// @param view       The view of the cell.
/// @param index      The index of the cell in the layout view.
- (void)layoutView:(RBBaseLayoutView * _Nonnull)layoutView cellWillDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
/// Called when a cell did disappear.
/// @param layoutView The layout view object.
/// @param view       The view of the cell.
/// @param index      The index of the cell in the layout view.
- (void)layoutView:(RBBaseLayoutView * _Nonnull)layoutView cellDidDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
@end

@class RBFormView;
@class RBFormViewFieldValidationResult;

/// A delegate to receive managed form events from an <code>RBFormView</code> object.
SWIFT_PROTOCOL("_TtP8Redbeard18RBFormViewDelegate_")
@protocol RBFormViewDelegate <RBLayoutViewDelegate>
@optional
/// Called for each schema items corresponding <code>UIView</code> when the form is being setup.
/// @param formView  The <code>RBFormView</code> object.
/// @param identifier   The identifier of the schema.
/// @param view         The <code>UIView</code> object that the schema with the provided identifier has created.
- (void)formViewSetupViewWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier view:(UIView * _Nonnull)view;
/// Called when the form is validated and submitted.
/// @param formView The <code>RBFormView</code> object.
- (void)formViewSubmittedWithFormView:(RBFormView * _Nonnull)formView;
/// Called when the form is cancelled.
/// @param formView The <code>RBFormView</code> object.
- (void)formViewCancelled:(RBFormView * _Nonnull)formView;
/// Called when a field will start editing for controls that support this i.e. UITextField and UITextView and children e.g. RBTextField, RBTextView.
/// @param formView  The <code>RBFormView</code> object.
/// @param identifier       The identifier of the field.
/// @param field            The field.
- (void)formViewFieldWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier didBeginEditingField:(UIView * _Nonnull)didBeginEditingField;
/// Called when a field will start editing for controls that support this i.e. UITextField and UITextView and children e.g. RBTextField, RBTextView.
/// @param formView  The <code>RBFormView</code> object.
/// @param identifier       The identifier of the field.
/// @param field            The field.
- (void)formViewFieldWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier didEndEditingField:(UIView * _Nonnull)didEndEditingField;
/// Called when a field will have it’s value changed.
/// @param formView  The <code>RBFormView</code> object.
/// @param identifier       The identifier of the field.
/// @param value            The current value of the field.
/// @param newValue         The new value that will be assigned to the field.
- (void)formViewFieldWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier willUpdateFromValue:(id _Nullable)value toValue:(id _Nullable)newValue;
/// Called when a field value has changed.
/// @param formView  The <code>RBFormView</code> object.
/// @param identifier       The identifier of the field.
/// @param previousValue    The previous value of the field.
/// @param value            The new value of the field.
- (void)formViewFieldWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier didUpdateFromValue:(id _Nullable)previousValue toValue:(id _Nullable)value;
/// Called to validate a field when normal validation rules attached to the field have all passed validation correctly.
/// @param formView         The <code>RBFormView</code> object.
/// @param identifier       The identifier of the field.
/// @param value            The value of the field.
/// @return Whether or not the field validates.
- (RBFormViewFieldValidationResult * _Nonnull)formViewFieldValidateWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier value:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller that should be used when presenting the photo library or camera.
/// @param formView The <code>RBFormView</code> object.
/// @return The <code>UIViewController</code> to present with.
- (UIViewController * _Nonnull)formViewPresentingViewControllerWithFormView:(RBFormView * _Nonnull)formView SWIFT_WARN_UNUSED_RESULT;
@end

@protocol RBFormAlertViewControllerDelegate;
@class RBGridPositioner;
@class NSBundle;

/// A managed form alert view controller. Used by UIViewController+FormAlert.h.
SWIFT_CLASS("_TtC8Redbeard25RBFormAlertViewController")
@interface RBFormAlertViewController : UIViewController <RBFormViewDelegate>
/// A delegate to receive form events such as submission and button taps.
@property (nonatomic, weak) id <RBFormAlertViewControllerDelegate> _Nullable delegate;
/// The underlying form schema.
@property (nonatomic, strong) RBFormSchema * _Nullable formSchema;
/// The current form values.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull formValues;
/// The titles of the buttons on the form alert.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull buttonTitles;
/// The identifiers of the buttons on the form alert.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull buttonIdentifiers;
/// Whether or not the first editable field should be selected when the form opens.
@property (nonatomic) BOOL shouldOpenFirstFieldForEditing;
/// The <code>RBPositioner</code> to handle the layout of form elements. Default = See positioner on <code>RBFormView</code> for default.
/// You may theme this positioner.
@property (nonatomic, strong) RBPositioner * _Nonnull formPositioner;
/// The overall layout positioner used. You may theme this positioner. Default values =
/// spacing = 10,
/// dimensions = 1,
/// margin = [10, 10, 10, 10],
/// orientation = <code>RBOrientationVertical</code>,
/// sizing = <code>RBGridPositionerSizeEvenly</code>.
@property (nonatomic, readonly, strong) RBGridPositioner * _Nonnull positioner;
/// The layout positioner used for the buttons. You may theme this positioner. Default values =
/// spacing = 10,
/// dimensions = 1,
/// margin = [0, 0, 0, 0],
/// orientation = <code>RBOrientationVertical</code>,
/// sizing = <code>RBGridPositionerSizeEvenly</code>.
@property (nonatomic, readonly, strong) RBGridPositioner * _Nonnull buttonPositioner;
/// The size required to present the form in the given available container size.
/// @param containerSize The available container size.
/// @return The size required to present the form.
- (CGSize)sizeWithContainerSize:(CGSize)containerSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
/// Defines the buttons that will be provided.
/// @param identifiers  The unique identifier for each button. Note you may use the pre-defined identifier constants <code>formAlertSubmitButtonIdentifier</code> and <code>formAlertCancelButtonIdentifier</code> to easily add submit and cancel buttons that call the <code>submitForm</code> and <code>cancelFrom</code> methods on the managed form.
/// @param titles       The buttons titles.
- (void)setButtons:(NSArray<NSString *> * _Nonnull)identifiers withTitles:(NSArray<NSString *> * _Nonnull)titles;
- (UIViewController * _Nonnull)formViewPresentingViewControllerWithFormView:(RBFormView * _Nonnull)formView SWIFT_WARN_UNUSED_RESULT;
- (void)formViewSetupViewWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier view:(UIView * _Nonnull)view;
- (void)formViewFieldWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier willUpdateFromValue:(id _Nullable)value toValue:(id _Nullable)newValue;
- (void)formViewFieldWithFormView:(RBFormView * _Nonnull)formView identifier:(NSString * _Nonnull)identifier didUpdateFromValue:(id _Nullable)previousValue toValue:(id _Nullable)value;
- (void)formViewSubmittedWithFormView:(RBFormView * _Nonnull)formView;
- (void)formViewCancelled:(RBFormView * _Nonnull)formView;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
+ (RBPositioner * _Nonnull)defaultPositioner SWIFT_WARN_UNUSED_RESULT;
+ (RBPositioner * _Nonnull)defaultButtonPositioner SWIFT_WARN_UNUSED_RESULT;
@end


/// An input view toolbar for <code>RBFormView</code> managed fields.
SWIFT_CLASS("_TtC8Redbeard18RBFormInputToolbar")
@interface RBFormInputToolbar : UIToolbar
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
@end

/// The action that will be performed when the return button is tapped on the keyboard.
typedef SWIFT_ENUM(NSInteger, RBFormKeyboardReturnAction, closed) {
/// Closes the keyboard only.
  RBFormKeyboardReturnActionCloseKeyboard = 0,
/// Submits the form.
  RBFormKeyboardReturnActionSubmitForm = 1,
/// Performs no action.
  RBFormKeyboardReturnActionNone = 2,
};

enum RBFormValidationViewType : NSInteger;
@class RBFormValidator;

/// A managed form schema.
SWIFT_CLASS("_TtC8Redbeard12RBFormSchema")
@interface RBFormSchema : NSObject
/// The identifier of the theme to apply to the form prior to presenting it. When the schema is applied to a form this
/// property has the effect of setting the managed forms theme identifier i.e. ‘managedForm.theme.identifier = themeIdentifier’.
@property (nonatomic, copy) NSString * _Nullable themeIdentifier;
/// Theme values to apply after any other prior theming has been applied. When the schema is applied to a form this
/// property has the effect of applying the theme overrides to the forms theme.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable themeOverrides;
/// The initial form values.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull initialValues;
/// An array of the views for the form. The views are obtained via the given schema items.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull views;
/// The <code>UIModalTransitionStyle</code> to use when displaying any modals such as the photo picker. Default = <code>UIModalTransitionStyleCoverVertical</code>.
@property (nonatomic) UIModalTransitionStyle modalTransitionStyle;
/// Whether or not the toolbar should be used on input views. Default = <code>YES</code>.
@property (nonatomic) BOOL toolbarEnabled;
/// The validation view to display when highlighting incomplete fields. Default = <code>RBFormValidationViewTypeTooltip</code>.
@property (nonatomic) enum RBFormValidationViewType validationViewType;
/// Whether or not fields in the form should perform validation checks serially and stop on the first invalid field when a form is submitted or to perform validation on all fields at the same time. Default = <code>false</code>.
@property (nonatomic) BOOL validateSeriallyOnSubmit;
/// Whether or not fields should validate when it’s value is modified. Default = <code>false</code>.
@property (nonatomic) BOOL validateFieldsOnChange;
/// The action to perform when the return key is tapped on the keyboard. Default = <code>RBFormKeyboardReturnActionCloseKeyboard</code>.
@property (nonatomic) enum RBFormKeyboardReturnAction keyboardReturnAction;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a new form validator from the schema.
/// @return A new <code>RBFormValidator</code> object.
- (RBFormValidator * _Nonnull)newValidator SWIFT_WARN_UNUSED_RESULT;
@end

/// The action that will be performed when the return button is tapped on the keyboard.
typedef SWIFT_ENUM(NSInteger, RBFormValidationViewType, closed) {
/// No view presented. Simply scrolls field into view.
  RBFormValidationViewTypeNone = 0,
/// Displays a tooltip with the validation message.
  RBFormValidationViewTypeTooltip = 1,
/// Displays a toast notification with the validation message.
  RBFormValidationViewTypeToast = 2,
};


/// An observer of changes to the keyboard state.
SWIFT_PROTOCOL("_TtP8Redbeard18RBKeyboardObserver_")
@protocol RBKeyboardObserver <NSObject>
@optional
/// Called when the keyboard will open.
/// @param frame The frame that the keyboard will occupy when opened.
- (void)keyboardWillOpenWithFrame:(CGRect)frame;
/// Called when the keyboard did open.
/// @param frame The frame that the keyboard occupied when it opened.
- (void)keyboardDidOpenWithFrame:(CGRect)frame;
/// Called when the keyboard will hide.
- (void)keyboardWillHide;
/// Called when the keyboard did hide.
- (void)keyboardDidHide;
/// Called when the keyboard frame will change.
/// @param frame         The new frame that the keyboard will use.
/// @param previousFrame The previous frame.
- (void)keyboardFrameWillChangeTo:(CGRect)frame from:(CGRect)previousFrame;
/// Called when the keyboard frame has changed.
/// @param frame         The new frame that the keyboard changed to.
/// @param previousFrame The previous frame.
- (void)keyboardFrameDidChangeTo:(CGRect)frame from:(CGRect)previousFrame;
@end


/// A delegate to receive scroll view events for an <code>RBScrollView</code> object.
SWIFT_PROTOCOL("_TtP8Redbeard20RBScrollViewObserver_")
@protocol RBScrollViewObserver <NSObject>
@optional
/// Called when the scroll view is tapped anywhere.
/// @param scrollView The <code>RBScrollView</code> object.
- (void)scrollViewWasTapped:(RBScrollView * _Nonnull)scrollView;
/// Called when a scroll operation will begin.
/// @param scrollView The <code>RBScrollView</code> object.
/// @param origin     The content origin at the start of the scroll operation.
- (void)scrollView:(RBScrollView * _Nonnull)scrollView willBeginScrollAtOrigin:(CGPoint)origin;
/// Called when the scroll operation did update to the given content offset.
/// @param scrollView The <code>RBScrollView</code> object.
/// @param origin     The current content offset of the scroll operation.
/// @param fromOrigin The original content offset of the scroll operation.
- (void)scrollView:(RBScrollView * _Nonnull)scrollView didScrollToOrigin:(CGPoint)origin fromOrigin:(CGPoint)fromOrigin;
/// Called when the user stopped the dragging interaction part of the scroll.
/// @param scrollView     The <code>RBScrollView</code> object.
/// @param willDecelerate Whether or not the scroll will continue in deceleration mode.
- (void)scrollView:(RBScrollView * _Nonnull)scrollView didEndDragging:(BOOL)willDecelerate;
/// Called when a scroll operation has finished.
/// @param scrollView The <code>RBScrollView</code> object.
/// @param origin     The final content offset of the scroll operation.
/// @param fromOrigin The original content offset of the scroll operation.
- (void)scrollView:(RBScrollView * _Nonnull)scrollView didFinishScrollToOrigin:(CGPoint)origin fromOrigin:(CGPoint)fromOrigin;
/// Called when the visible content frame has changed.
/// @param scrollView          The <code>RBScrollView</code> object.
/// @param visibleContentFrame The content frame that is currently visible.
- (void)scrollView:(RBScrollView * _Nonnull)scrollView visibleContentFrameDidChangeTo:(CGRect)visibleContentFrame;
@end

@class UITextField;
@class UITextView;
@class RBPhotoView;
@class UIImagePickerController;

/// A view that provides a managed form. Note the UIViews attached to this via the form schema have their delegates set this instance in order to provide the automation necessary.
SWIFT_CLASS("_TtC8Redbeard10RBFormView")
@interface RBFormView : UIView <RBFormFieldValueDelegate, RBKeyboardObserver, RBLayoutViewDelegate, RBPhotoViewDelegate, RBScrollViewObserver, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UITextFieldDelegate, UITextViewDelegate, UIToolbarDelegate>
/// A delegate to receive form events.
@property (nonatomic, weak) id <RBFormViewDelegate> _Nullable delegate;
/// The <code>RBPositioner</code> to handle the layout of form elements. Default = <code>RBGridPositioner</code> with values
/// spacing = 0,
/// dimensions = 1,
/// margin = [0, 0, 0, 0],
/// orientation = <code>RBOrientationVertical</code>,
/// sizing = <code>RBGridPositionerSizeEvenly</code>.
@property (nonatomic, strong) RBPositioner * _Nonnull positioner;
/// The <code>UIScrollView</code> to scroll and adjust when managing fields and input views.
/// If <code>nil</code>, the layout view of the form itself is used.  Default is <code>nil</code>.
@property (nonatomic, weak) UIScrollView * _Nullable scroller;
/// The <code>UIModalTransitionStyle</code> to use when displaying any modals such as the photo picker. Default = <code>UIModalTransitionStyleCoverVertical</code>.
@property (nonatomic) UIModalTransitionStyle modalTransitionStyle;
/// The toolbar to be used on input views when editing form fields.
@property (nonatomic, readonly, strong) RBFormInputToolbar * _Nonnull formInputToolbar;
/// Whether or n\ot the toolbar should be used on input views. Default = <code>YES</code>.
@property (nonatomic) BOOL toolbarEnabled;
/// The current value of the form fields. If hidden form fields are present the initial
/// values of these fields will be included when calling this property. Note setting hidden form fields using this property has no effect.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull values;
- (void)initializeView;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)boundsDidChangeFrom:(CGRect)previousBounds toBounds:(CGRect)bounds;
/// Returns the <code>UIView</code> for the schema matching the given identifier.
/// @param identifier   The identifier of the schema item object.
/// @return The <code>UIView</code> for the given identifier.
- (UIView * _Nullable)view:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Updates the form using the given schema.
/// @param formSchema The <code>RBFormSchema</code> object.
- (void)setFormSchema:(RBFormSchema * _Nonnull)formSchema;
/// Updates the form using the given schema.
/// @param formSchema   The <code>RBFormSchema</code> object.
/// @param positioner   A postioner, you are required to pass this if using schema based positioners e.g. RBFlexiPositioner.
- (void)setFormSchema:(RBFormSchema * _Nonnull)formSchema :(RBPositioner * _Nonnull)positioner;
/// Resets the form fields to the initial values specified in the schema.
- (void)resetToInitialValues;
/// Updates the current value of the (non hidden) form fields with the given values dictionary.
/// @param values   The dictionary of specific values you would like to update. Pass <code>NSNull</code> for values you would like to remove.
- (void)updateValues:(NSDictionary<NSString *, id> * _Nonnull)values;
/// Opens the keyboard/inputview on the first editable field.
- (void)selectFirstField;
/// Opens the keyboard/inputview on the editable field with the given identifier.
/// @param identifier   The name of the field to select for editing.
- (void)selectField:(NSString * _Nonnull)identifier;
/// Runs validation for the field with the given identifier.
/// @param identifier   The field identifier.
/// @return Whether or not the field validated.
- (BOOL)validateField:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Runs validation on the form, returning the result.
/// @param serially             Perform validation serially stopping at the first invalid field.
/// @param present              Present tooltip/toast (as set via <code>validationViewType</code>) and move to the first invalid field encountered.
/// @return Whether or not the form is valid.
- (BOOL)validateForm:(BOOL)serially present:(BOOL)present;
/// Submits the form, prompting validation and delegate calls if successful.
/// @return Whether or not the form validated and was submitted.
- (BOOL)submitForm;
/// Cancels the form, calling the delegate method.
- (void)cancelForm;
- (void)keyboardWillOpenWithFrame:(CGRect)frame;
- (void)keyboardWillHide;
- (void)closeKeyboard:(void (^ _Nullable)(void))completion;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (void)cameraSelectedWithPhotoView:(RBPhotoView * _Nonnull)photoView;
- (void)librarySelectedWithPhotoView:(RBPhotoView * _Nonnull)photoView;
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
- (void)controlValueWillChangeTo:(id _Nullable)controlValue from:(id _Nullable)fromControlValue withField:(UIView * _Nonnull)field;
- (void)controlValueDidChangeTo:(id _Nullable)controlValue from:(id _Nullable)fromControlValue withField:(UIView * _Nonnull)field;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// The result of custom validation for a field.
SWIFT_CLASS("_TtC8Redbeard31RBFormViewFieldValidationResult")
@interface RBFormViewFieldValidationResult : NSObject
/// Whether or not the field validates.
@property (nonatomic) BOOL validates;
/// The optional failure message to be used when the field is invalid.
@property (nonatomic, copy) NSString * _Nullable failureMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(BOOL)validates :(NSString * _Nullable)failureMessage OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Redbeard17RBFragmentedArray")
@interface RBFragmentedArray : NSObject
/// The first (lowest) index of an object stored in the array. Returns ‘NSNotFound’ if no index exists.
@property (nonatomic, readonly) NSInteger firstIndex;
/// The last (highest) index of an object stored in the array. Returns ‘NSNotFound’ if no index exists.
@property (nonatomic, readonly) NSInteger lastIndex;
/// The number of objects stored in the array.
@property (nonatomic, readonly) NSInteger count;
/// The first object (with the lowest index) stored in the array.
@property (nonatomic, readonly) id _Nullable firstObject;
/// The last object (with the highest index) stored in the array.
@property (nonatomic, readonly) id _Nullable lastObject;
/// An array of indexes for which objects are stored in the array.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull indexes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the object stored in the array at a given index.
/// @param object The object to store. If object is <code>nil</code> the object at index will be removed.
/// @param index  The index at which to store the object.
- (void)setObject:(id _Nullable)object at:(NSInteger)index;
/// Removes the object stored at the given index.
/// @param index The index at which the object is stored.
- (void)removeObjectAt:(NSInteger)index;
/// Removes all of the objects stored in the array.
- (void)removeAllObjects;
/// Retrieves the object stored at the given index.
/// @param index The index to retrieve the object for.
/// @return The object stored at the index, or nil if there was no object found.
- (id _Nullable)objectAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Enumerates each object in the array for removal.
/// @param block The block to call on each object, if the block returns true the object is removed.
- (void)enumerateObjectRemovalUsingBlock:(BOOL (^ _Nonnull)(id _Nonnull, NSInteger))block;
/// Enumerates the objects stored in the array.
/// @param block The block to call on each object in the array.
- (void)enumerateObjectsUsingBlock:(void (^ _Nonnull)(id _Nonnull, NSInteger))block;
/// Determines whether an object is stored at the given index.
/// @param index The index at which to check if an object is stored.
/// @return Whether or not an object is stored at the given index.
- (BOOL)hasIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end

enum RBGridPositionerSize : NSInteger;

SWIFT_CLASS("_TtC8Redbeard16RBGridPositioner")
@interface RBGridPositioner : RBPositioner
/// The orientation of the grid, and thus how it expands to fit views pushed to it.
/// e.g. a vertical grid will expand vertically.
/// Default = <code>RBOrientationVertical</code>.
@property (nonatomic) RBOrientation orientation;
/// The number of rows/columns (depending on orientation), for each row set (repeats).
/// i.e. [ 2, 3 ] will have a 2, 3, 2, 3, … repeating number of dimensions. Default = [ 1 ].
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull dimensions;
/// Indicates that after the given row the <code>alternateDimensions</code> property should be used instead must be greater than 1. Default = <code>-1</code>.
/// Set to < 1 to disable this feature.
@property (nonatomic) NSInteger useAlternateDimensionsAfterRowIndex;
/// The alternate dimensions to use once <code>useAlternateDimensionsAfterRowIndex</code> comes into affect. Note if this is <code>nil</code> then
/// the normal dimensions value will continue to be used. Default = <code>[]</code> empty.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull alternateDimensions;
/// The method of sizing child views. Default = <code>RBGridPositionerSizeEvenly</code>.
@property (nonatomic) enum RBGridPositionerSize sizing;
- (BOOL)shouldInvalidateDueToContentInsetsFrom:(UIEdgeInsets)from to:(UIEdgeInsets)to SWIFT_WARN_UNUSED_RESULT;
- (RBPositionerResult * _Nonnull)calculateWithNumberOfViews:(NSInteger)numberOfViews viewPort:(CGSize)viewPort sizeBlock:(SWIFT_NOESCAPE CGSize (^ _Nonnull)(NSInteger, CGSize))sizeBlock SWIFT_WARN_UNUSED_RESULT;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RBGridPositionerSize, closed) {
/// Cells are sized to evenly to fill all available space in the unfixed orientation.
/// *  e.g. for vertical orientation, widths will expand to fit available space.
/// *  e.g. for horizontal orientation, heights will expand to fit available space.
  RBGridPositionerSizeEvenly = 0,
/// Cells are sized according to the size they request.
  RBGridPositionerSizeToSize = 1,
/// Cells are sized according to the size they request and spaced evenly in the unfixed orientation.
/// *  e.g. for vertical orientation, cells will be spaced evenly across the whole width of the available space.
/// *  e.g. for horizontal orientation, cells will be spaced evenly across the whole height of the available space.
  RBGridPositionerSizeSpacedEvenly = 2,
};

@class RBViewController;
@class RBHeaderItem;

/// A customisable page header.
SWIFT_CLASS("_TtC8Redbeard22RBHeaderViewController")
@interface RBHeaderViewController : UIViewController
/// The <code>RBViewController</code> that the header belongs to.
@property (nonatomic, readonly, weak) RBViewController * _Nullable pageViewController;
/// The items to display on the header.
@property (nonatomic, copy) NSArray<RBHeaderItem *> * _Nonnull items;
/// The margin to apply around the items in the header.
@property (nonatomic) UIEdgeInsets margin;
/// The spacing to apply between the items in the header.
@property (nonatomic) CGFloat spacing;
/// The header height. Default = <code>44</code>.
@property (nonatomic, readonly) CGFloat height;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Redbeard14RBHelperWiring")
@interface RBHelperWiring : NSObject
+ (void)wireWithObject:(id _Nonnull)object theme:(NSDictionary<NSString *, id> * _Nonnull)theme ignore:(NSArray<NSString *> * _Nullable)ignore;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A simple image view cell. Provides an image view that is the size of the cell
/// alongside an optional overlay image view.
SWIFT_CLASS("_TtC8Redbeard15RBImageCellView")
@interface RBImageCellView : RBBaseCellView
/// The image view.
@property (nonatomic, readonly, strong) RBImageView * _Nonnull imageView;
/// An image view that maybe used as an overlay.
@property (nonatomic, readonly, strong) RBImageView * _Nonnull overlayImageView;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)populateBodyView:(UIView * _Nonnull)bodyView;
- (void)layoutBodyView:(UIView * _Nonnull)bodyView;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme toBodyView:(UIView * _Nonnull)bodyView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class RBNetworkClient;
@class NSString;
@class UIColor;
@class RBImageNetworkOperation;

/// The singleton center for the retrieval of images.
/// Automatically caches images into memory. Set <code>memoryCache.totalCostLimit</code> to zero if you would not like to cache.
/// If a cached image is used then any delegate methods will not be triggered only the completion will be called.
SWIFT_CLASS("_TtC8Redbeard13RBImageCenter")
@interface RBImageCenter : NSObject
/// The shared singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RBImageCenter * _Nonnull shared;)
+ (RBImageCenter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The network client to use when downloading images over the network.
@property (nonatomic, strong) RBNetworkClient * _Nonnull networkClient;
/// The underlying <code>NSCache</code> that is used to cache images processed by <code>RBImageCenter</code>. By default the cache size is 100 MB.
@property (nonatomic, strong) NSCache<NSString *, UIImage *> * _Nonnull memoryCache;
/// Gets an image from the bundle.
/// @param name   The name of the image in the bundle.
/// @return       The retrieved image.
+ (UIImage * _Nullable)bundleImageWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Gets a resizable image from the bundle.
/// @param name   The name of the image in the bundle.
/// @param insets The fixed edge insets to use for the resizeable image.
/// @return       The retrieved image.
+ (UIImage * _Nullable)resizableImageWithName:(NSString * _Nonnull)name with:(UIEdgeInsets)insets SWIFT_WARN_UNUSED_RESULT;
/// Gets an image from the given filesystem path.
/// @param path   The path of the image in the filesystem.
/// @return       The retrieved image.
+ (UIImage * _Nullable)imageWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Gets a glyph image from the bundle, optionally with a specified color or size.
/// @param name       The name of the glyph image in the bundle.
/// @param tintColor  The optional color with which to tint the glyph.
/// @param size       The optional size (specified in height points) with which to scale the glyph. Pass zero to ignore.
/// @return           The requested glyph image.
- (UIImage * _Nullable)glyphImageWithName:(NSString * _Nonnull)name tintColor:(UIColor * _Nullable)tintColor size:(float)size SWIFT_WARN_UNUSED_RESULT;
/// Retrieves a decoded image asynchronously over HTTP using the request given. Start’s immediately.
/// @param queue         The dispatch queue, pass nil to use main dispatch queue.
/// @param request       The network request to use for retrieval.
/// @param caching       Whether or not to cache the image or use a cached copy if possible.
/// @param progress      The completion block to be called on completion or failure. Must not be <code>nil</code>.
/// @param completion    The completion block to be called on completion or failure. Must not be <code>nil</code>.
/// @return              The image network operation
- (RBImageNetworkOperation * _Nullable)imageWithQueue:(dispatch_queue_t _Nullable)queue request:(NSURLRequest * _Nonnull)request caching:(BOOL)caching progress:(void (^ _Nullable)(int64_t, int64_t, int64_t))progress completion:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Retrieves a decoded image asynchronously from disk using path given. Start’s immediately.
/// @param queue          The dispatch queue, pass nil to use main dispatch queue.
/// @param path           The path to use for retrieval.
/// @param caching        Whether or not to cache the image or use a cached copy if possible.
/// @param completion   The completion block to be called on completion or failure. Must not be <code>nil</code>.
/// @return               The image network operation
- (id <RBCancellableTask> _Nullable)imageFromDiskWithQueue:(dispatch_queue_t _Nullable)queue path:(NSString * _Nonnull)path caching:(BOOL)caching completion:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completion;
/// Removes any cached copy of an image at the given path.
/// @param path   The path of the image in the filesystem.
- (void)removeFromCacheWithPath:(NSString * _Nonnull)path;
/// Removes any cached copy of an image at the given URLRequest.
/// @param request   The URLRequest that details the location of the image.
- (void)removeFromCacheWithRequest:(NSURLRequest * _Nonnull)request;
@end

@protocol RBNetworkOperationDelegate;
@class NSURLResponse;
@class NSHTTPURLResponse;
@class NSURLSessionTaskMetrics;
@class NSURLSessionTask;

/// A network operation.
SWIFT_CLASS("_TtC8Redbeard18RBNetworkOperation")
@interface RBNetworkOperation : NSObject
/// A delegate to receive events.
@property (nonatomic, weak) id <RBNetworkOperationDelegate> _Nullable delegate;
/// The original request.
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable originalRequest;
/// The current request.
@property (nonatomic, readonly, copy) NSURLRequest * _Nullable currentRequest;
/// The current state of the underlying <code>URLSessionTask</code>.
@property (nonatomic, readonly) NSURLSessionTaskState state;
/// The underlying response object, <code>nil</code> until completion.
@property (nonatomic, readonly, strong) NSURLResponse * _Nullable response;
/// The underlying HTTP response object, <code>nil</code> until completion or if the request was not of type <code>HTTP</code>.
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable httpResponse;
/// The response data, <code>nil</code> until completion.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// The HTTP status code if available otherwise 0.
@property (nonatomic, readonly) NSInteger httpStatusCode;
/// The metrics for this operation <code>nil</code> until completion.
@property (nonatomic, readonly, strong) NSURLSessionTaskMetrics * _Nullable metrics;
/// Initializes a new network operation.
/// @param task The underlying task.
/// @return The initialized network operation.
- (nonnull instancetype)initWithTask:(NSURLSessionTask * _Nonnull)task OBJC_DESIGNATED_INITIALIZER;
- (void)resume;
- (void)suspend;
- (void)cancel;
/// Deserializes the <code>data</code> property to a JSON object.
/// @return The JSON as dictionary or an array of dictionaries as appropriate or <code>nil</code> if <code>data</code> is empty or the response was invalid.
- (id _Nullable)dataAsJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A image network operation.
SWIFT_CLASS("_TtC8Redbeard23RBImageNetworkOperation")
@interface RBImageNetworkOperation : RBNetworkOperation
/// The current state of the underlying <code>URLSessionTask</code>.
@property (nonatomic, readonly) NSURLSessionTaskState state;
- (void)resume;
- (void)suspend;
- (void)cancel;
- (nonnull instancetype)initWithTask:(NSURLSessionTask * _Nonnull)task OBJC_DESIGNATED_INITIALIZER;
@end

@class RBIntrospectiveObjectPropertySchema;

/// An <code>NSObject</code> that provides information about it’s properties.
/// Note: Only properties recognized by the Obj-C runtime can be recognized i.e. Swift nilable types such as Int? will not be inspected.
/// Note: The <code>BOOL</code> type is recognised as a <code>signed char</code>.  To explicitly recognise as a boolean
/// use the <code>bool</code> (lowercase) type instead.
SWIFT_CLASS("_TtC8Redbeard21RBIntrospectiveObject")
@interface RBIntrospectiveObject : NSObject
/// Gets <code>RBIntrospectiveObjectPropertySchema</code> objects for each of the properties on this class and
/// it’s superclasses that are not marked to be ignored.
/// @return A dictionary of property names to <code>RBIntrospectiveObjectPropertySchema</code> objects.
+ (NSDictionary<NSString *, RBIntrospectiveObjectPropertySchema *> * _Nonnull)propertySchemas SWIFT_WARN_UNUSED_RESULT;
/// Gets an array of the names of properties to ignore in this class and it’s superclasses.
/// @return The properties to ignore.
+ (NSArray<NSString *> * _Nullable)ignoreProperties SWIFT_WARN_UNUSED_RESULT;
/// Gets an array of the raw <code>RBIntrospectiveObjectPropertyType</code> integer types of the properties to ignore in this class and it’s superclasses.
/// @return The property types to ignore.
+ (NSArray<NSNumber *> * _Nullable)ignorePropertyTypes SWIFT_WARN_UNUSED_RESULT;
/// Populates the properties with random values.
/// @param depth The depth to which to add child objects.
- (void)populateRandomValuesWithDepth:(NSInteger)depth;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The schema details of a property on an <code>RBIntrospectiveObject</code> instance.
SWIFT_CLASS("_TtC8Redbeard35RBIntrospectiveObjectPropertySchema")
@interface RBIntrospectiveObjectPropertySchema : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// JSON serialisation and deserialisation convenience methods.
SWIFT_CLASS("_TtC8Redbeard6RBJson")
@interface RBJson : NSObject
+ (id _Nullable)deserialiseWithFileURL:(NSURL * _Nonnull)fileURL options:(NSJSONReadingOptions)options SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)deserialiseWithFilePath:(NSString * _Nonnull)filePath options:(NSJSONReadingOptions)options SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)deserialiseWithString:(NSString * _Nonnull)string options:(NSJSONReadingOptions)options SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)deserialiseWithData:(NSData * _Nonnull)data options:(NSJSONReadingOptions)options SWIFT_WARN_UNUSED_RESULT;
+ (NSData * _Nullable)serialiseWithJson:(id _Nonnull)json options:(NSJSONWritingOptions)options SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)serialiseToStringWithJson:(id _Nonnull)json options:(NSJSONWritingOptions)options SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)traverseWithJson:(id _Nonnull)json path:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class of properties that provides built in <code>JSON</code> serialisation.
/// Note: Only properties recognized by the Obj-C runtime can be recognized i.e. Swift nilable types such as Int? will be ignored.
/// Note: Collection properties cannot contain elements of mixed types.
SWIFT_CLASS("_TtC8Redbeard12RBJsonObject")
@interface RBJsonObject : RBIntrospectiveObject
/// Builds an object by deserialising the given <code>JSON</code> data.
/// @param jsonData The <code>JSON</code> data to deserialise.
/// @return The deserialised object, or <code>nil</code> if it could not be deserialised.
- (nullable instancetype)initWithJsonData:(NSData * _Nonnull)jsonData;
/// Builds an object by deserialising the given <code>JSON</code> string.
/// @param jsonString   The <code>JSON</code> string to deserialise.
/// @return The deserialised object, or <code>nil</code> if it could not be deserialised.
- (nullable instancetype)initWithJsonString:(NSString * _Nonnull)jsonString;
/// Initialize the managed <code>JSON</code> object with the given property list dictionary.
/// @param dictionary The property list <code>NSDictionary</code> object.
/// @return The initialized object.
- (nullable instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
/// Initialize the managed <code>JSON</code> object.
/// @return The initialized object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Gets a dictionary of the names of <code>Array</code> properties that are of a particular <code>RBJsonObject</code> type.
/// @return The dictionary of RBJsonObject types to property names.
+ (NSDictionary<NSString *, SWIFT_METATYPE(RBJsonObject)> * _Nullable)arrayMappings SWIFT_WARN_UNUSED_RESULT;
/// Gets a dictionary of the names of <code>Dictionary</code> properties that contain a particular <code>RBJsonObject</code> type.
/// @return The dictionary of RBJsonObject types to property names.
+ (NSDictionary<NSString *, SWIFT_METATYPE(RBJsonObject)> * _Nullable)dictionaryMappings SWIFT_WARN_UNUSED_RESULT;
/// Serialises the value of the object to a <code>Dictionary</code>.
/// The result includes recursively the values of it’s children.
/// @return The resulting <code>Dictionary</code> object.
- (NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Serialises the value of the object to <code>Data</code> containing the <code>JSON</code> representation of the object.
/// The result includes recursively the values of it’s children.
/// @return The resulting <code>JSON</code> as a <code>Data</code> or nil on failure.
- (NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
/// Serialises the value of the object to a <code>JSON</code> string.
/// The result includes recursively the values of it’s children.
/// @return The resulting json string or nil on failure.
- (NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
/// Modify the incoming JSON value before the object is populated.
/// @param propertyName The name of the property on the class.
/// @param value        The value for the property.
/// @return The transformed value.
- (id _Nullable)transformOnDeserializationWithPropertyName:(NSString * _Nonnull)propertyName value:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Modify the value of a property before it is serialized.
/// @param propertyName The name of the property on the class.
/// @param value        The value for the property.
/// @return The transformed value.
- (id _Nullable)transformOnSerializationWithPropertyName:(NSString * _Nonnull)propertyName value:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Gets the JSON key that should be used for the given property name.
/// @param propertyName The name of the property on the class.
/// @return The corresponding key string (will be used in <code>JSON</code> serialisation/deserialisation and unwrapping).
- (NSString * _Nonnull)jsonKeyWithPropertyName:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
/// Serialise the given <code>Date</code> property value to a string. Default implementation uses an ISO 8601 formatted string (yyyy-MM-ddTHH:mm:ssZ).
/// @param date         The <code>Date</code> property value.
/// @param propertyName The name of the property.
/// @return The resulting <code>String</code> object.
- (NSString * _Nonnull)dateConversionWithDate:(NSDate * _Nonnull)date propertyName:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
/// Deserialise a date string to an <code>Date</code> property. Default implementation assumes an ISO 8601 formatted string (yyyy-MM-ddTHH:mm:ssZ).
/// @param dateString   The serialised string value.
/// @param propertyName The name of the property.
/// @return The resulting <code>NSDate</code> object.
- (NSDate * _Nullable)dateConversionWithDateString:(NSString * _Nonnull)dateString propertyName:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
/// Called to allow custom manipulation and validation after deserialization. Returning <code>false</code> will mean the object will not be initialized (<code>nil</code>).
/// @param dictionary   The name of the property on the class.
/// @return Object is valid. Returning false will return a <code>nil</code> object.
- (BOOL)afterDeserialization:(NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)valueForUndefinedKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nullable)value forUndefinedKey:(NSString * _Nonnull)key;
@end



/// A delegate to receive positioner schema events.
SWIFT_PROTOCOL("_TtP8Redbeard26RBSchemaPositionerDelegate_")
@protocol RBSchemaPositionerDelegate <NSObject>
/// Push a new cell to the layout view.
/// @param cell         The cell to push to the layout view.
/// @param positioner   The positioner making the request.
- (void)pushCellWithCell:(UIView * _Nonnull)cell positioner:(RBPositioner * _Nonnull)positioner;
/// Insert a new cell to the layout view at the given index.
/// @param cell         The cell to insert to the layout view.
/// @param index        The index at which to insert the cell.
/// @param positioner   The positioner making the request.
- (void)insertCellWithCell:(UIView * _Nonnull)cell index:(NSInteger)index positioner:(RBPositioner * _Nonnull)positioner;
/// Remove the cell at the given index from the layout view.
/// @param index        The index of the cell to remove.
/// @param positioner   The positioner making the request.
- (void)removeCellWithIndex:(NSInteger)index positioner:(RBPositioner * _Nonnull)positioner;
/// Remove the given cell from the layout view.
/// @param cell         The cell to remove from the layout view.
/// @param positioner   The positioner making the request.
- (void)removeCellWithCell:(UIView * _Nonnull)cell positioner:(RBPositioner * _Nonnull)positioner;
/// Pop the last cell from the layout view.
/// @param positioner   The positioner making the request.
- (void)popCellWithPositioner:(RBPositioner * _Nonnull)positioner;
/// Pop all of the cells from the layout view.
/// @param positioner   The positioner making the request.
- (void)popAllCellsWithPositioner:(RBPositioner * _Nonnull)positioner;
@end


/// A normal layout view that is preloaded with its cells.
SWIFT_CLASS("_TtC8Redbeard12RBLayoutView")
@interface RBLayoutView : RBBaseLayoutView <RBSchemaPositionerDelegate>
/// A delegate that receives cell loading, appearance and positioning events.
@property (nonatomic, weak) id <RBLayoutViewDelegate> _Nullable layoutDelegate;
/// The positioner that determines how the cells are positioned and sized.
@property (nonatomic, strong) RBPositioner * _Nonnull positioner;
/// The array of cells in the layout view.
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull cells;
/// Push a new cell to the layout view.
/// @param cell The cell to push to the layout view.
/// @return Whether or not the operation was successful.
- (BOOL)pushCell:(UIView * _Nonnull)cell;
/// Pushes multiples cells to the layout view.
/// @param cells The cells to push to the layout view.
/// @return Whether or not the operation was successful.
- (BOOL)pushCells:(NSArray<UIView *> * _Nonnull)cells;
/// Insert a new cell to the layout view at the given index.
/// @param cell  The cell to insert to the layout view.
/// @param index The index at which to insert the cell.
/// @return Whether or not the operation was successful.
- (BOOL)insertCell:(UIView * _Nonnull)cell at:(NSInteger)index;
/// Pop the last cell from the layout view.
/// @return Whether or not the operation was successful.
- (BOOL)popCell;
/// Pop all of the cells from the layout view.
/// @return Whether or not the operation was successful.
- (BOOL)popAllCells;
/// Remove the cell at the given index from the layout view.
/// @param index The index of the cell to remove.
/// @return Whether or not the operation was successful.
- (BOOL)removeCellAt:(NSInteger)index;
/// Remove the given cell from the layout view.
/// @param cell The cell to remove from the layout view.
/// @return Whether or not the operation was successful.
- (BOOL)removeCell:(UIView * _Nonnull)cell;
/// Whether or not the layout view contains the given cell.
/// @param cell The cell to check for.
/// @return Whether or not the cell was found in the layout view.
- (BOOL)containsCell:(UIView * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
/// Gets the index of the given cell in the layout view.
/// @param cell The cell to find the index of.
/// @return The index of the cell, or <code>NSNotFound</code> if it was not found.
- (NSInteger)indexOfCell:(UIView * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
- (void)viewportDidChangeFrom:(CGRect)previousViewport to:(CGRect)viewport;
- (CGRect)cellFrameAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)pauseLayoutUpdates;
- (void)resumeLayoutUpdates;
- (void)setNeedsLayout;
- (void)layoutIfNeeded;
- (void)layoutSubviews;
- (BOOL)pushCell:(UIView * _Nonnull)cell positioner:(RBPositioner * _Nonnull)positioner SWIFT_WARN_UNUSED_RESULT;
- (BOOL)insertCell:(UIView * _Nonnull)cell at:(NSInteger)index positioner:(RBPositioner * _Nonnull)positioner SWIFT_WARN_UNUSED_RESULT;
- (BOOL)popCell:(RBPositioner * _Nonnull)positioner SWIFT_WARN_UNUSED_RESULT;
- (BOOL)popAllCells:(RBPositioner * _Nonnull)positioner SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeCellAt:(NSInteger)index positioner:(RBPositioner * _Nonnull)positioner SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeCell:(UIView * _Nonnull)cell positioner:(RBPositioner * _Nonnull)positioner SWIFT_WARN_UNUSED_RESULT;
- (void)cellWillPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellDidPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellWillAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellDidAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellWillDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
- (void)cellDidDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
- (void)popCellWithPositioner:(RBPositioner * _Nonnull)positioner;
- (void)popAllCellsWithPositioner:(RBPositioner * _Nonnull)positioner;
- (void)pushCellWithCell:(UIView * _Nonnull)cell positioner:(RBPositioner * _Nonnull)positioner;
- (void)insertCellWithCell:(UIView * _Nonnull)cell index:(NSInteger)index positioner:(RBPositioner * _Nonnull)positioner;
- (void)removeCellWithIndex:(NSInteger)index positioner:(RBPositioner * _Nonnull)positioner;
- (void)removeCellWithCell:(UIView * _Nonnull)cell positioner:(RBPositioner * _Nonnull)positioner;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol RBLazyLayoutViewDelegate;
@protocol RBLazyLayoutViewDataSource;
@class UIGestureRecognizer;

/// The lazy loading layout view.
SWIFT_CLASS("_TtC8Redbeard16RBLazyLayoutView")
@interface RBLazyLayoutView : RBBaseLayoutView <UIGestureRecognizerDelegate>
/// A delegate that receives cell loading, appearance and positioning events.
@property (nonatomic, weak) id <RBLazyLayoutViewDelegate> _Nullable layoutDelegate;
/// The positioner that determines how the cells are positioned and sized.
@property (nonatomic, strong) RBPositioner * _Nonnull positioner;
/// The data source that provides cells to the layout view.
@property (nonatomic, weak) id <RBLazyLayoutViewDataSource> _Nullable dataSource;
/// Whether or not the cell allows selection. Default = <code>trie</code>.
@property (nonatomic) BOOL allowsSelection;
/// Whether or not the cell allows selection. Default = <code>false</code>.
@property (nonatomic) BOOL allowsMultipleSelection;
/// Whether or not the last selected item can be unselected. Default = <code>true</code>.
@property (nonatomic) BOOL zeroSelectionAllowed;
/// The count of the currently selected cells.
@property (nonatomic, readonly) NSInteger selectedCellCount;
/// The indexes of the currently selected cells.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull selectedCellIndexes;
/// The animator that is used when sliding the body view to reveal the button area. Default = <code>[RBAnimator defaultSpringAnimator]</code>.
@property (nonatomic, readonly, strong) RBAnimator * _Nonnull buttonAreaAnimator;
/// The animator that is used when transitioning between states (none, highlighted, selected, disabled).
/// Default = <code>[RBAnimator defaultSpringAnimator]</code> (with duration 0.1).
@property (nonatomic, readonly, strong) RBAnimator * _Nonnull transitionAnimator;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) BOOL shouldDisableScrolling;
@property (nonatomic, readonly) BOOL supportsSchemaBasedPositioners;
- (void)initializeView;
/// Indicates if the cell at the given index is currently selected.
/// @param index    The index of the cell.
/// @return Whether or not the cell is selected.
- (BOOL)isCellSelectedAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the cell at the given index is currently highlighted.
/// Note this returns ONLY for cells highlighted using <code>setCellHighlightedAt:</code> method.
/// @param index    The index of the cell.
/// @return Whether or not the cell is highlighted.
- (BOOL)isCellHighlightedAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the cell at the given index is currently enabled.
/// @param index    The index of the cell.
/// @return Whether or not the cell is enabled.
- (BOOL)isCellEnabledAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Sets the enabled state of the cell at the given index.
/// Ignores the <code>allowsSelection</code>, <code>allowsMultipleSelection</code>, <code>zeroSelectionAllowed</code> values.
/// Events <code>willEnable</code>, <code>didEnable</code> etc are NOT raised when using this method.
/// @param enabled      The enabled state to set.
/// @param index        The index of the cell.
/// @param animated     Animate the state change.
/// @return Whether or not the state requested has been set.
- (BOOL)setCellEnabled:(BOOL)enabled at:(NSInteger)index animated:(BOOL)animated;
/// Sets the selected state of the cell at the given index.
/// Ignores the <code>allowsSelection</code>, <code>allowsMultipleSelection</code>, <code>zeroSelectionAllowed</code> values.
/// Events <code>willSelect</code>, <code>didSelect</code> etc are NOT raised when using this method.
/// @param selected     The selected state to set.
/// @param index        The index of the cell.
/// @param animated     Animate the state change.
/// @return Whether or not the state requested has been set.
- (BOOL)setCellSelected:(BOOL)selected at:(NSInteger)index animated:(BOOL)animated;
/// Sets the highlighted state of the cell at the given index.
/// Ignores the <code>allowsSelection</code>, <code>allowsMultipleSelection</code>, <code>zeroSelectionAllowed</code> values.
/// Events <code>shouldHighlight</code>, <code>didHighlight</code> etc are NOT raised when using this method.
/// @param highlighted  The highlighted state to set.
/// @param index        The index of the cell.
/// @param animated     Animate the state change.
/// @return Whether or not the state requested has been set.
- (BOOL)setCellHighlighted:(BOOL)highlighted at:(NSInteger)index animated:(BOOL)animated;
/// Clears all the currently highlighted cells.
/// Note this applies ONLY for cells highlighted using <code>setCellHighlightedAt:</code> method.
/// @param animated     Animate the state change.
- (void)clearAllHighlightedCells:(BOOL)animated;
/// Clears all the currently selected cells.
/// @param animated     Animate the state change.
- (void)clearAllSelectedCells:(BOOL)animated;
/// Clears all the currently disabled cells.
/// @param animated     Animate the state change.
- (void)clearAllDisabledCells:(BOOL)animated;
/// Slide the body view to reveal the left button area to the user.
/// @param index        The index of the cell on which to open the button area.
/// @param animated     Whether or not the transition should be animated.
- (void)openLeftButtonAreaAt:(NSInteger)index withAnimation:(BOOL)animated;
/// Slide the body view to reveal the right button area to the user.
/// @param index        The index of the cell on which to open the button area.
/// @param animated     Whether or not the transition should be animated.
- (void)openRightButtonAreaAt:(NSInteger)index withAnimation:(BOOL)animated;
/// Close the exposed button area cell.
/// @param animated   Whether or not the transition should be animated.
- (void)closeButtonAreaWithAnimation:(BOOL)animated;
/// Pauses updates to the lazylayout view. This means no reloading of cells, even on scrolling.
- (void)pauseLayoutUpdates;
/// Resumes updates to the lazylayout view. Will call <code>reloadData</code> if <code>reloadData</code> was called whilst paused.
- (void)resumeLayoutUpdates;
- (void)setNeedsLayout;
- (void)layoutIfNeeded;
- (void)layoutSubviews;
- (CGRect)cellFrameAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// The cell view at the given index if it is visible.
/// @param index The index of the cell.
/// @return The cell view or <code>nil</code> if a cell with the requested index is out of range or is not visible.
- (RBBaseCellView * _Nullable)cellAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// The index of the given cell view. For cells that are not ‘on screen’ this will return <code>nil</code>.
/// @param cell The index of the cell.
/// @return The index of the cell or <code>NSNotFound</code> if the cell is not visible or otherwise unavailable.
- (NSInteger)indexForCell:(RBBaseCellView * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
/// Gets an instantiated or reused cell of the given type. The layout view is capable of managing
/// multiple types. Use this function for objC code.
/// @param type                     The type of the cell to reuse or instantiate.
/// @param applyTheming             Whether or not to apply theming to the cell immediately on creation.
/// @param configurationOnCreation  An optional block to be called only on instantiation (not on reuse).
/// @return The cell object for configuration.
- (RBBaseCellView * _Nonnull)objCReusableCellWithType:(SWIFT_METATYPE(RBBaseCellView) _Nonnull)type applyTheming:(BOOL)applyTheming configurationOnCreation:(void (^ _Nullable)(RBBaseCellView * _Nonnull))configurationOnCreation SWIFT_WARN_UNUSED_RESULT;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Called when the cell at the given index will be loaded.
/// @param cell  The cell that will be loaded.
/// @param index The index of the cell in the layout.
- (void)cellWillLoad:(RBBaseCellView * _Nonnull)cell at:(NSInteger)index;
/// Called when the cell at the given index was loaded.
/// @param cell  The cell that was loaded.
/// @param index The index of the cell in the layout.
- (void)cellDidLoad:(RBBaseCellView * _Nonnull)cell at:(NSInteger)index;
/// Called when the cell at the given index will be unloaded.
/// @param cell  The cell that will be unloaded.
/// @param index The index of the cell in the layout.
- (void)cellWillUnload:(RBBaseCellView * _Nonnull)cell at:(NSInteger)index;
/// Called when the cell at the given index was unloaded.
/// @param cell  The cell that was unloaded.
/// @param index The index of the cell in the layout.
- (void)cellDidUnload:(RBBaseCellView * _Nonnull)cell at:(NSInteger)index;
/// Called when the layout view will reload it’s cells from the data source.
- (void)willReloadData;
/// Called when the layout view has reloaded it’s cells from the data source.
- (void)didReloadData;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)triggerWillSelectAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)triggerDidSelectAt:(NSInteger)index;
- (BOOL)triggerWillDeselectAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)triggerDidDeselectAt:(NSInteger)index;
- (BOOL)triggerWillEnableAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)triggerDidEnableAt:(NSInteger)index;
- (BOOL)triggerWillDisableAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)triggerDidDisableAt:(NSInteger)index;
- (BOOL)triggerShouldHighlightAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)triggerDidHighlightAt:(NSInteger)index;
- (void)triggerDidUnhighlightAt:(NSInteger)index;
- (BOOL)triggerButtonAreaCanOpenAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)triggerButtonAreaDidOpenAt:(NSInteger)index;
- (void)triggerButtonAreaDidCloseAt:(NSInteger)index;
- (void)triggerButtonAreaDidSelectAt:(NSInteger)index withIdentifier:(NSString * _Nonnull)identifier area:(BOOL)area;
- (BOOL)setCellSelectedAt:(NSInteger)index selected:(BOOL)selected ask:(BOOL)ask withEvents:(BOOL)withEvents retheme:(BOOL)retheme animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setCellEnabledAt:(NSInteger)index enabled:(BOOL)enabled ask:(BOOL)ask withEvents:(BOOL)withEvents retheme:(BOOL)retheme animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setCellHighlightedAt:(NSInteger)index highlighted:(BOOL)highlighted animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
- (BOOL)rangeIsValid SWIFT_WARN_UNUSED_RESULT;
- (void)viewportDidChangeFrom:(CGRect)previousViewport to:(CGRect)viewport;
- (void)updateCellsWithViewport:(CGRect)viewport;
- (RBBaseCellView * _Nullable)cellFor:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)unloadAllCells;
/// Reloads the cells from the data source.
- (void)reloadData;
/// Reloads the cells from the data source at the given index. Note only does so if the cell is currently visible.
/// @param index    The index of the cell.
- (void)reloadCellAt:(NSInteger)index;
- (void)cellWillPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellDidPosition:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellWillAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellDidAppear:(UIView * _Nonnull)view with:(NSInteger)index withFrame:(CGRect)frame;
- (void)cellWillDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
- (void)cellDidDisappear:(UIView * _Nonnull)view with:(NSInteger)index;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// The data source that provides cells to a <code>RBLazyLayoutView</code>.
SWIFT_PROTOCOL("_TtP8Redbeard26RBLazyLayoutViewDataSource_")
@protocol RBLazyLayoutViewDataSource <NSObject>
/// Gets the number of cells to be displayed in the layout view.
/// @param layoutView The layout view object.
/// @return The number of cells.
- (NSInteger)countWithLayoutView:(RBLazyLayoutView * _Nonnull)layoutView SWIFT_WARN_UNUSED_RESULT;
/// Gets the desired size of the cell at the given index, with the
/// available container size provided.
/// @param index      The index of the cell to size.
/// @param container  The available size for the cell in it’s container.
/// @param layoutView The layout view object.
/// @return The desired size of the cell.
- (CGSize)cellSizeAt:(NSInteger)index container:(CGSize)container layoutView:(RBLazyLayoutView * _Nonnull)layoutView SWIFT_WARN_UNUSED_RESULT;
/// Gets the cell to be presented in the layout view at the given index.
/// The <code>reusableCellWithType:configurationOnCreation:</code> or <code>reusableCellWithType:shouldApplyTheming:configurationOnCreation</code> methods should be used.
/// The first is a convienance method that passes <code>YES</code> as the the shouldApplyTheming parameter to the second.
/// @param index      The index of the cell.
/// @param layoutView The layout view object.
/// @return The prepared cell.
- (RBBaseCellView * _Nonnull)cellAt:(NSInteger)index layoutView:(RBLazyLayoutView * _Nonnull)layoutView SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when a cell will be removed from the layout view and stored
/// for reuse at a later stage. Use this to stop any image download jobs, etc.
/// @param layoutView The layout view object.
/// @param cell       The cell that is being removed.
/// @param index      The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView willRemoveCell:(RBBaseCellView * _Nonnull)cell at:(NSInteger)index;
@end


/// A delegate that receives cell loading, appearance and positioning events.
SWIFT_PROTOCOL("_TtP8Redbeard24RBLazyLayoutViewDelegate_")
@protocol RBLazyLayoutViewDelegate <NSObject>
@optional
/// Called when the layout view will reload it’s cells from the data source.
/// @param layoutView       The layout view.
- (void)layoutViewWillReloadData:(RBLazyLayoutView * _Nonnull)layoutView;
/// Called when the layout view has reloaded it’s cells from the data source.
/// @param layoutView       The layout view.
- (void)layoutViewDidReloadData:(RBLazyLayoutView * _Nonnull)layoutView;
/// Called to determine if a touch event that will affect the button area or affect the cell state should be allowed.
/// @param layoutView       The layout view object.
/// @param touch            The touch data.
/// @return Whether or not the touch should be allowed.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView shouldReceive:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// Called when a cell will be selected and used to determine if the state change should be allowed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
/// @return Whether or not to allow the state change.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView willSelectCellAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Called when a cell has been selected.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didSelectCellAt:(NSInteger)index;
/// Called when a cell will be deselected and used to determine if the state change should be allowed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
/// @return Whether or not to allow the state change.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView willDeselectCellAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Called when a cell has been deselected.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didDeselectCellAt:(NSInteger)index;
/// Called when a cell will be enabled and used to determine if the state change should be allowed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
/// @return Whether or not to allow the state change.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView willEnableCellAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Called when a cell has been enabled.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didEnableCellAt:(NSInteger)index;
/// Called when a cell will be disabled and used to determine if the state change should be allowed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
/// @return Whether or not to allow the state change.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView willDisableCellAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Called when a cell has been disabled.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didDisableCellAt:(NSInteger)index;
/// Called when a cell will be highlighted and used to determine if the state change should be allowed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
/// @return Whether or not to allow the state change.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView shouldHighlightCellAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Called when a cell has been highlighted.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didHighlightCellAt:(NSInteger)index;
/// Called when a cell has been unhighlighted.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didUnhighlightCellAt:(NSInteger)index;
/// Called when a cells button area will open and used to determine if this should be allowed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
/// @return Whether or not to allow the button area to open.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView canOpenButtonAreaAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Called when a cells button area has been open.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didOpenButtonAreaAt:(NSInteger)index;
/// Called when a cells button area has been closed.
/// @param layoutView       The layout view.
/// @param index            The index of the cell.
- (void)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didCloseButtonAreaAt:(NSInteger)index;
/// Called when a cells button area will open and used to determine if this should be allowed.
/// @param layoutView       The layout view.
/// @param identifier       The identifier of the selected button.
/// @param left             Which button area was opened the left (<code>YES</code>) or the right (<code>NO</code>).
/// @param index            The index of the cell.
/// @return Whether or not close the button area.
- (BOOL)layoutView:(RBLazyLayoutView * _Nonnull)layoutView didSelectButtonAreaButtonWithIdentifier:(NSString * _Nonnull)identifier leftArea:(BOOL)left at:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;

/// Provides locality-specific serialisations and conversions - e.g. dates, numbers, currencies, etc.
SWIFT_CLASS("_TtC8Redbeard14RBLocaleCenter")
@interface RBLocaleCenter : NSObject
/// The main locale center.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RBLocaleCenter * _Nonnull main;)
+ (RBLocaleCenter * _Nonnull)main SWIFT_WARN_UNUSED_RESULT;
/// Parses a string to retrieve a number.
/// @param numberString The string that contains a number.
/// @return The resulting <code>NSNumber</code> object or <code>nil</code>.
- (NSNumber * _Nullable)numberFrom:(NSString * _Nullable)numberString SWIFT_WARN_UNUSED_RESULT;
/// Parses a string to retrieve a number.
/// @param numberString The string that contains a number.
/// @param numberStyle  The formatting style to expect in the string.
/// @return The resulting <code>NSNumber</code> object or <code>nil</code>.
- (NSNumber * _Nullable)numberFrom:(NSString * _Nullable)numberString using:(NSNumberFormatterStyle)numberStyle SWIFT_WARN_UNUSED_RESULT;
/// Formats a number to a string.
/// @param number The number to format.
/// @return The resulting formatted string.
- (NSString * _Nonnull)stringFrom:(NSNumber * _Nonnull)number SWIFT_WARN_UNUSED_RESULT;
/// Formats a number to a string.
/// @param number      The number to format.
/// @param numberStyle The formatting style to use.
/// @return The resulting formatted string.
- (NSString * _Nonnull)stringFrom:(NSNumber * _Nonnull)number using:(NSNumberFormatterStyle)numberStyle SWIFT_WARN_UNUSED_RESULT;
/// Parses a date from a string.
/// @param dateString    The string to parse.
/// @param universalTime Whether the date is UTC.
/// @return The parsed <code>NSDate</code> object.
- (NSDate * _Nullable)dateFrom:(NSString * _Nonnull)dateString universalTime:(BOOL)universalTime SWIFT_WARN_UNUSED_RESULT;
/// Parses a date from a string.
/// @param dateString    The string to parse.
/// @param dateStyle     The formatting style to expect for the date component of the string.
/// @param timeStyle     The formatting style to expect for the time component of the string.
/// @param universalTime Whether the date is UTC.
/// @return The parsed <code>Date</code> object.
- (NSDate * _Nullable)dateFrom:(NSString * _Nonnull)dateString usingDateStyle:(NSDateFormatterStyle)dateStyle time:(NSDateFormatterStyle)timeStyle universalTime:(BOOL)universalTime SWIFT_WARN_UNUSED_RESULT;
/// Formats an <code>Date</code> into a string.
/// @param date          The <code>NSDate</code> to format.
/// @param universalTime Whether the date is UTC.
/// @return The formatted string value.
- (NSString * _Nonnull)stringFrom:(NSDate * _Nonnull)date universalTime:(BOOL)universalTime SWIFT_WARN_UNUSED_RESULT;
/// Formats an <code>Date</code> into a string.
/// @param date          The <code>Date</code> to format.
/// @param dateStyle     The formatting style to use for the date component.
/// @param timeStyle     The formatting style to use for the time component.
/// @param universalTime Whether the date is UTC.
/// @return The formatted string value.
- (NSString * _Nonnull)stringFrom:(NSDate * _Nullable)date usingDateStyle:(NSDateFormatterStyle)dateStyle time:(NSDateFormatterStyle)timeStyle universalTime:(BOOL)universalTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RBVisualEffectType : NSInteger;
@class UIVisualEffectView;

/// Provides an easy method to wrap a UIView within a UIVisualEffectView with blur and vibrancy effects.
SWIFT_CLASS("_TtC8Redbeard21RBManagedVisualEffect")
@interface RBManagedVisualEffect : NSObject
/// The main view.
@property (nonatomic, readonly, strong) UIView * _Nonnull view;
/// The parent view that should contain the managed view.
@property (nonatomic, readonly, strong) UIView * _Nonnull parentView;
/// The effect type.
@property (nonatomic) enum RBVisualEffectType effectType;
/// The managed view. Depending on the <code>RBVisualEffectType</code> this will either be the <code>view</code> (if effectType = RBVisualEffectType.none)
/// or a <code>UIVisualEffectView</code>.
@property (nonatomic, readonly, strong) UIView * _Nullable managedView;
/// The <code>UIVisualEffectView</code> if an effect has been applied.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nullable visualEffectView;
/// The <code>UIVisualEffectView</code> that corresponds to the <code>UIVibrancyEffect</code> if a effectType with vibrancy has been applied.
@property (nonatomic, readonly, strong) UIVisualEffectView * _Nullable vibrancyEffectView;
@property (nonatomic, copy) NSArray<UIView *> * _Nullable wrapperViews;
/// Initializes a new <code>RBManagedVisualEffect</code> object.
/// @param view             The <code>UIView</code> that effects should be applied to.
/// @param parentView       The parent <code>UIView</code> container that the view or the managed <code>UIVisualEffectView</code>s should be added to.
/// @param effectType       The effect type.
/// @return A newly initialized <code>RBManagedVisualEffect</code> object.
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view parentView:(UIView * _Nonnull)parentView effectType:(enum RBVisualEffectType)effectType OBJC_DESIGNATED_INITIALIZER;
/// Sets the <code>managedView</code> frame to the given frame. If an effectType is applied the underlying <code>UIVisualEffectView</code>s as well
/// as the main view will be adjusted to match the frame size.
/// @param frame    The frame to use.
- (void)layoutWithFrame:(CGRect)frame;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A dictionary with ordered values.
SWIFT_CLASS("_TtC8Redbeard26RBMutableOrderedDictionary")
@interface RBMutableOrderedDictionary : NSObject
@property (nonatomic, readonly) NSInteger count;
@property (nonatomic, readonly, copy) NSArray<NSObject *> * _Nonnull keys;
@property (nonatomic, readonly, copy) NSArray * _Nonnull values;
- (id _Nullable)getValueForKey:(NSObject * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)putValue:(id _Nonnull)value forKey:(NSObject * _Nonnull)key;
- (id _Nullable)valueAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)removeValueForKey:(NSObject * _Nonnull)key;
- (void)removeAllObjects;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RBNetworkClientDelegate;
@class NSURLSession;
@class NSURLSessionConfiguration;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSURLSessionDataTask;
@class NSCachedURLResponse;

SWIFT_CLASS("_TtC8Redbeard15RBNetworkClient")
@interface RBNetworkClient : NSObject <NSURLSessionDataDelegate>
@property (nonatomic) BOOL printRequestURL;
@property (nonatomic) BOOL printRequestBody;
@property (nonatomic) BOOL printRequestHeaders;
@property (nonatomic) BOOL printResponseURL;
@property (nonatomic) BOOL printResponseBody;
@property (nonatomic) BOOL printResponseHeaders;
/// A delegate to receive rest client events.
@property (nonatomic, weak) id <RBNetworkClientDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) NSURLSession * _Nullable session;
@property (nonatomic, readonly, strong) NSURLSessionConfiguration * _Nonnull configuration;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable applyAdditionalHeaders;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (void)cancelAllRequests;
- (RBNetworkOperation * _Nullable)createWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithUrlString:(NSString * _Nonnull)urlString onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onCompletion:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSError * _Nullable))onCompletion SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithUrl:(NSURL * _Nonnull)url onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onCompletion:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSError * _Nullable))onCompletion SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithUrlString:(NSString * _Nonnull)urlString onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onError:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger, NSError * _Nullable))onError onSuccess:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger))onSuccess SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithUrl:(NSURL * _Nonnull)url onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onError:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger, NSError * _Nullable))onError onSuccess:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger))onSuccess SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithRequest:(NSURLRequest * _Nonnull)request onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onError:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger, NSError * _Nullable))onError onSuccess:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger))onSuccess SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithRequest:(NSURLRequest * _Nonnull)request typeOf:(SWIFT_METATYPE(RBNetworkOperation) _Nonnull)typeOf onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onError:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger, NSError * _Nullable))onError onSuccess:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSInteger))onSuccess SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithRequest:(NSURLRequest * _Nonnull)request onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onCompletion:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSError * _Nullable))onCompletion SWIFT_WARN_UNUSED_RESULT;
- (RBNetworkOperation * _Nullable)createWithRequest:(NSURLRequest * _Nonnull)request typeOf:(SWIFT_METATYPE(RBNetworkOperation) _Nonnull)typeOf onProgress:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, int64_t, int64_t, int64_t))onProgress onCompletion:(void (^ _Nullable)(RBNetworkOperation * _Nonnull, NSError * _Nullable))onCompletion SWIFT_WARN_UNUSED_RESULT;
- (void)resumeWithOperation:(RBNetworkOperation * _Nonnull)operation;
- (void)suspendWithOperation:(RBNetworkOperation * _Nonnull)operation;
- (void)cancelWithOperation:(RBNetworkOperation * _Nonnull)operation;
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willBeginDelayedRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLSessionDelayedRequestDisposition, NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session taskIsWaitingForConnectivity:(NSURLSessionTask * _Nonnull)task;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end


SWIFT_PROTOCOL("_TtP8Redbeard23RBNetworkClientDelegate_")
@protocol RBNetworkClientDelegate <NSObject>
@optional
- (BOOL)networkClient:(RBNetworkClient * _Nonnull)networkClient operation:(RBNetworkOperation * _Nonnull)operation didReceive:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nullable)(NSURLSessionResponseDisposition))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (BOOL)networkClient:(RBNetworkClient * _Nonnull)networkClient operation:(RBNetworkOperation * _Nonnull)operation willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nullable)(NSURLRequest * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (BOOL)networkClient:(RBNetworkClient * _Nonnull)networkClient operation:(RBNetworkOperation * _Nonnull)operation didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nullable)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (void)networkClient:(RBNetworkClient * _Nonnull)networkClient isWaitingForConnectivity:(RBNetworkOperation * _Nonnull)operation;
- (void)networkClient:(RBNetworkClient * _Nonnull)networkClient operation:(RBNetworkOperation * _Nonnull)operation bytesSent:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)networkClient:(RBNetworkClient * _Nonnull)networkClient operation:(RBNetworkOperation * _Nonnull)operation didCompleteWithError:(NSError * _Nullable)error;
@end



/// A delegate to be notified of events to the network operation.
SWIFT_PROTOCOL("_TtP8Redbeard26RBNetworkOperationDelegate_")
@protocol RBNetworkOperationDelegate <NSObject>
@optional
- (BOOL)networkOperation:(RBNetworkOperation * _Nonnull)operation didReceive:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nullable)(NSURLSessionResponseDisposition))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (BOOL)networkOperation:(RBNetworkOperation * _Nonnull)operation willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nullable)(NSURLRequest * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (BOOL)networkOperation:(RBNetworkOperation * _Nonnull)operation didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nullable)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler SWIFT_WARN_UNUSED_RESULT;
- (void)networkOperationWithIsWaitingForConnectivity:(RBNetworkOperation * _Nonnull)operation;
- (void)networkOperation:(RBNetworkOperation * _Nonnull)operation bytesSent:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)networkOperation:(RBNetworkOperation * _Nonnull)operation didCompleteWithError:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, RBNetworkRequestMethod, closed) {
/// The HTTP GET method.
  RBNetworkRequestMethodGet = 0,
/// The HTTP POST method.
  RBNetworkRequestMethodPost = 1,
/// The HTTP PATCH method.
  RBNetworkRequestMethodPatch = 2,
/// The HTTP PUT method.
  RBNetworkRequestMethodPut = 3,
/// The HTTP DELETE method.
  RBNetworkRequestMethodDelete = 4,
/// The HTTP HEAD method.
  RBNetworkRequestMethodHead = 5,
/// The HTTP OPTIONS method.
  RBNetworkRequestMethodOptions = 6,
/// The HTTP TRACE method.
  RBNetworkRequestMethodTrace = 7,
/// The HTTP CONNECT method.
  RBNetworkRequestMethodConnect = 8,
};


/// An extend view that displays an activity indicator.
SWIFT_CLASS("_TtC8Redbeard20RBNextPageExtendView")
@interface RBNextPageExtendView : RBExtendView
- (void)initializeView;
- (void)didMoveToSuperview;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RBORMDatabaseObserver;
@protocol RBORMObjectObserver;
@class RBSQLiteConnection;
@class RBSQLiteResult;
@class RBORMObject;

/// Centrally manages SQLite databases and ORM objects.
/// <ul>
///   <li>
///     Manages multiple SQLite databases.
///   </li>
///   <li>
///     Creates tables.
///   </li>
///   <li>
///     Manages RBORMObjects, and provides CRUD support.
///   </li>
///   <li>
///     Runs SQL queries directly.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8Redbeard11RBORMCenter")
@interface RBORMCenter : NSObject
/// The default database identifier
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull defaultDatabaseIdentifier;)
+ (NSString * _Nonnull)defaultDatabaseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// The shared singleton <code>RBORMCenter</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) RBORMCenter * _Nonnull shared;)
+ (RBORMCenter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Registers an object to receive notifications whenever an interaction occurs with a managed database.
/// @param receiver The observer that should receive notification events.
/// @return Returns <code>YES</code> if registration was succesful.
- (BOOL)registerDatabaseNotificationReceiver:(id <RBORMDatabaseObserver> _Nonnull)receiver SWIFT_WARN_UNUSED_RESULT;
/// Detaches an existing database observer from receiving event notifications.
/// @param receiver The observer that should no longer receive notifications.
- (void)deregisterDatabaseNotificationReceiver:(id <RBORMObjectObserver> _Nonnull)receiver;
/// Registers an object to receive notifications whenever an interaction occurs with a managed object.
/// @param receiver The observer that should receive notification events.
/// @return Returns <code>YES</code> if registration was succesful.
- (BOOL)registerObjectNotificationReceiver:(id <RBORMObjectObserver> _Nonnull)receiver SWIFT_WARN_UNUSED_RESULT;
/// Detaches an existing object observer from receiving event notifications.
/// @param receiver The observer that should no longer receive notifications.
- (void)deregisterObjectNotificationReceiver:(id <RBORMObjectObserver> _Nonnull)receiver;
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection willAttachWithIdentifier:(NSString * _Nonnull)identifier;
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection didAttachWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful;
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection willDetachWithIdentifier:(NSString * _Nonnull)identifier;
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection didDetachWithIdentifier:(NSString * _Nonnull)identifier;
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection withIdentifier:(NSString * _Nonnull)identifier willExecute:(NSString * _Nonnull)query bindings:(NSArray * _Nullable)bindings;
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection withIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
- (void)object:(RBORMObject * _Nonnull)object willInsertWithIdentifier:(NSString * _Nonnull)identifier;
- (void)object:(RBORMObject * _Nonnull)object willUpdateWithIdentifier:(NSString * _Nonnull)identifier;
- (void)object:(RBORMObject * _Nonnull)object didInsertWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
- (void)object:(RBORMObject * _Nonnull)object didUpdateWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
- (void)object:(RBORMObject * _Nonnull)object willDeleteWithIdentifier:(NSString * _Nonnull)identifier;
- (void)object:(RBORMObject * _Nonnull)object didDeleteWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
/// Attaches a <code>RBSQLiteConnection</code> connection for management by the <code>RBORMCenter</code>.
/// @param databaseConnection   The database connection to manage.
/// @param databaseIdentifier   An identifier which will be used to reference this specific database connection.
/// @return Returns <code>YES</code> if the <code>RBSQLiteConnection</code> was successfully attached.
- (BOOL)attachDatabaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection databaseIdentifier:(NSString * _Nonnull)databaseIdentifier;
/// Detaches an existing <code>RBSQLiteConnection</code> database connection.
/// @param databaseIdentifier The database identifier reference for the database connection to detach.
/// @return Returns the detached <code>RBSQLiteConnection</code> connection or nil.
- (RBSQLiteConnection * _Nullable)detachDatabaseConnectionWithDatabaseIdentifier:(NSString * _Nonnull)databaseIdentifier;
/// Returns the <code>RBSQLiteConnection</code> database connection that corresponds to the specified identifier.
/// @param identifier The database identifier.
/// @return Returns the <code>RBSQLiteConnection</code> database connection or nil.
- (RBSQLiteConnection * _Nullable)databaseConnectionForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Executes a SQL query directly on a database and returns a <code>RBSQLiteResult</code>.
/// @param queryString The formatted SQL query string, may contain ‘?’ bindings.
/// @param bindings    An array of items the provide the values that should correspond to the ‘?’ bindings specified in the query string.
/// @return Returns a <code>RBSQLiteResult</code>.
- (RBSQLiteResult * _Nullable)executeQuery:(NSString * _Nonnull)queryString bindings:(NSArray * _Nullable)bindings SWIFT_WARN_UNUSED_RESULT;
/// Executes a SQL query directly on a database and returns a <code>RBSQLiteResult</code>.
/// @param queryString          The formatted SQL query string, may contain ‘?’ bindings.
/// @param bindings             An array of items the provide the values that should correspond to the ‘?’ bindings specified in the query string.
/// @param databaseIdentifier   The database identifier indicating which underlying database connection to query.
/// @return Returns a <code>RBSQLiteResult</code>.
- (RBSQLiteResult * _Nullable)executeQuery:(NSString * _Nonnull)queryString bindings:(NSArray * _Nullable)bindings databaseIdentifier:(NSString * _Nonnull)databaseIdentifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides the abilitiy to receive notifications for database events.
SWIFT_PROTOCOL("_TtP8Redbeard21RBORMDatabaseObserver_")
@protocol RBORMDatabaseObserver <NSObject>
@optional
/// Called when a database connection is about to be attached.
/// @param databaseConnection The <code>RBSQLiteConnection</code> database connection that will be attached.
/// @param identifier         The corresponding database identifier.
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection willAttachWithIdentifier:(NSString * _Nonnull)identifier;
/// Called when a database connection attachment request completes.
/// @param databaseConnection     The <code>RBSQLiteConnection</code> database connection that was attempted to be attached.
/// @param identifier             The corresponding database identifier.
/// @param operationWasSuccessful `Yes’ is successful.
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection didAttachWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful;
/// Called when a database connection is about to be detached.
/// @param databaseConnection The <code>RBSQLiteConnection</code> database connection that will be detached.
/// @param identifier         The corresponding database identifier.
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection willDetachWithIdentifier:(NSString * _Nonnull)identifier;
/// Called when a database connection detachment request completes.
/// @param databaseConnection The <code>RBSQLiteConnection</code> database connection that was attempted to be detached.
/// @param identifier         The corresponding database identifier.
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection didDetachWithIdentifier:(NSString * _Nonnull)identifier;
/// Called when a database operation or query occurs.
/// @param databaseConnection The <code>RBSQLiteConnection</code> database connection that will be attached.
/// @param identifier         The corresponding database identifier.
/// @param query              The SQL query that will be excecuted.
/// @param bindings           The bindings used for the query.
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection withIdentifier:(NSString * _Nonnull)identifier willExecute:(NSString * _Nonnull)query bindings:(NSArray * _Nullable)bindings;
/// Called when a database operation or query occurs.
/// @param databaseConnection       The <code>RBSQLiteConnection</code> database connection that will be attached.
/// @param identifier               The corresponding database identifier.
/// @param operationWasSuccessful   <code>YES</code> if successful.
/// @param result                   The <code>RBSQLiteResult</code> containing the return data or the error details if the operation failed.
- (void)databaseConnection:(RBSQLiteConnection * _Nonnull)databaseConnection withIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
@end

@class RBORMResult;

/// Provides a managed ORM (Object relationship management) object for use with SQLite.
/// Note: Only properties recognized by the Obj-C runtime can be recognized i.e. Swift nilable types such as Int? will be ignored.
/// note:
/// NSDates are automatically serialized and deserialized. Dates are stored on disk in the ISO 8601 format.
SWIFT_CLASS("_TtC8Redbeard11RBORMObject")
@interface RBORMObject : RBIntrospectiveObject
/// The primary key assigned to this object by SQLite. Will be set to a value < 1 if the object has not yet been saved.
@property (nonatomic, readonly) NSInteger pk;
/// Indiciates that a valid primary key value has been set and assigned by SQLite.
@property (nonatomic, readonly) BOOL hasPrimaryKey;
/// The database identifier for the database this object is associated with.
@property (nonatomic, readonly, copy) NSString * _Nonnull databaseIdentifier;
/// Ignore specific properties by returning a list of the property names.
/// @return The property types to ignore.
+ (NSArray<NSString *> * _Nullable)ignoreProperties SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSNumber *> * _Nullable)ignorePropertyTypes SWIFT_WARN_UNUSED_RESULT;
/// A list of the nullable properties for this object.
/// @return A list of the properites that are permitted to be null or nil.
+ (NSArray<NSString *> * _Nullable)nullableProperties SWIFT_WARN_UNUSED_RESULT;
/// A mapping of property names to database column names when the names differ. Format [ propertyName : databaseColumnName ]
/// @return A mapping of the property names and their corresponding database column names.
+ (NSDictionary<NSString *, NSString *> * _Nullable)propertiesToColumnNames SWIFT_WARN_UNUSED_RESULT;
/// Returns the table name to be used. The default implementation returns the name of the class (removes module names i.e. Module.ClassName -> ClassName) and strips any non alphanumeric characters.
/// @return The name of the table.
+ (NSString * _Nonnull)tableName SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new <code>RBORMObject</code> object with a specific database identifier.
/// @param identifier The database identifier.
/// @return A newly initialized <code>RBORMObject</code> object.
- (nonnull instancetype)initWithDatabaseIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new <code>RBORMObject</code> object with the default database identifier <code>RBORMCenter.defaultDatabaseIdentifier</code>.
/// @return A newly initialized <code>RBORMObject</code> object.
- (nonnull instancetype)init;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// Deletes this object from the database.
/// @return Returns true if successful.
- (BOOL)delete;
/// Saves this object. An insert or update occurs as needed.
/// @return Returns true if successful.
- (BOOL)save;
/// This method is called before inserting.
- (void)willInsert;
/// This method is called before updating.
- (void)willUpdate;
/// Called after inserting.
/// @param success If <code>YES</code> then the object has been saved successfully.
- (void)didInsert:(BOOL)success;
/// Called after updating.
/// @param success If <code>YES</code> then the object has been saved successfully.
- (void)didUpdate:(BOOL)success;
/// This method is called before deletion.
- (void)willDelete;
/// Called after deletion.
/// @param success If <code>YES</code> then the object has been saved deleted.
- (void)didDelete:(BOOL)success;
/// This method is called before populating the data in the object instance.
- (void)willPopulate;
/// Called after population.
/// @param success If <code>YES</code> then the object has been saved populated.
- (void)didPopulate:(BOOL)success;
/// Executes a given SQL query string with the given bindings using the default database identifier.
/// Expects the query is setup to return a list of objects.
/// @param queryString        The SQL query string to execute.
/// @param bindings           The corresponding bindings for the SQL query string given.
/// @return The result
+ (RBORMResult * _Nonnull)executeQueryWithQueryString:(NSString * _Nonnull)queryString bindings:(NSArray * _Nullable)bindings SWIFT_WARN_UNUSED_RESULT;
/// Executes a given SQL query string with the given bindings on the database who’s identifier is given.
/// Expects the query is setup to return a list of objects.
/// @param queryString        The SQL query string to execute.
/// @param bindings           The corresponding bindings for the SQL query string given.
/// @param databaseIdentifier The identifier of the database to query.
/// @return The result
+ (RBORMResult * _Nonnull)executeQueryWithQueryString:(NSString * _Nonnull)queryString bindings:(NSArray * _Nullable)bindings databaseIdentifier:(NSString * _Nonnull)databaseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the object for the given primary key value.
/// @param pk   The primary key. Must be > 0.
/// @return The object matching the primary key or <code>nil</code> if not found.
+ (RBORMObject * _Nullable)forPk:(NSInteger)pk SWIFT_WARN_UNUSED_RESULT;
/// Returns the object for the given primary key value.
/// @param pk   The primary key. Must be > 0.
/// @return The object matching the primary key or <code>nil</code> if not found.
+ (RBORMObject * _Nullable)forPk:(NSInteger)pk databaseIdentifier:(NSString * _Nonnull)databaseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a table exists for this object type in the database for the default database identifier.
/// @return Whether or not the table exists.
+ (BOOL)tableExists SWIFT_WARN_UNUSED_RESULT;
/// Determines whether a table exists for this object type for the database identifier provided.
/// @param databaseIdentifier The identifier of the database to use.
/// @return Whether or not the table exists.
+ (BOOL)tableExistsWithDatabaseIdentifier:(NSString * _Nonnull)databaseIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Creates the table for this object type for the default database identifier if the table is missing.
/// @return Whether or not the table exists or was created.
+ (BOOL)createTableIfMissing;
/// Creates the table for this object type for the database identifier provided if the table is missing.
/// @param databaseIdentifier The identifier of the database to use.
/// @return Whether or not the table exists or was created.
+ (BOOL)createTableIfMissingWithDatabaseIdentifier:(NSString * _Nonnull)databaseIdentifier;
@end


/// Provides the abilitiy to receive notifications for ORM object events.
SWIFT_PROTOCOL("_TtP8Redbeard19RBORMObjectObserver_")
@protocol RBORMObjectObserver <NSObject>
@optional
/// Called when a <code>RBORMObject</code> object will be inserted.
/// @param object     The <code>RBORMObject</code> that will be inserted.
/// @param identifier The database identifier that references the underlying database connection.
- (void)object:(RBORMObject * _Nonnull)object willInsertWithIdentifier:(NSString * _Nonnull)identifier;
/// Called when a <code>RBORMObject</code> object will be updated.
/// @param object     The <code>RBORMObject</code> that will be updated.
/// @param identifier The database identifier that references the underlying database connection.
- (void)object:(RBORMObject * _Nonnull)object willUpdateWithIdentifier:(NSString * _Nonnull)identifier;
/// Called when a <code>RBORMObject</code> object insert request completes.
/// @param object                 The <code>RBORMObject</code> that was attempted to be inserted.
/// @param identifier             The database identifier that references the underlying database connection.
/// @param operationWasSuccessful <code>YES</code> if successful.
/// @param result                 The <code>RBSQLiteResult</code> containing the return data or the error details if the operation failed.
- (void)object:(RBORMObject * _Nonnull)object didInsertWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
/// Called when a <code>RBORMObject</code> object update request completes.
/// @param object                 The <code>RBORMObject</code> that was attempted to be updated.
/// @param identifier             The database identifier that references the underlying database connection.
/// @param operationWasSuccessful <code>YES</code> if successful.
/// @param result                 The <code>RBSQLiteResult</code> containing the return data or the error details if the operation failed.
- (void)object:(RBORMObject * _Nonnull)object didUpdateWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
/// Called when a <code>RBORMObject</code> object will be deleted.
/// @param object     The <code>RBORMObject</code> that will be deleted.
/// @param identifier The database identifier that references the underlying database connection.
- (void)object:(RBORMObject * _Nonnull)object willDeleteWithIdentifier:(NSString * _Nonnull)identifier;
/// Called when a <code>RBORMObject</code> object delete request completes.
/// @param object                 The <code>RBORMObject</code> that was attempted to be deleted.
/// @param identifier             The database identifier that references the underlying database connection.
/// @param operationWasSuccessful <code>YES</code> if successful.
/// @param result                 The <code>RBSQLiteResult</code> containing the return data or the error details if the operation failed.
- (void)object:(RBORMObject * _Nonnull)object didDeleteWithIdentifier:(NSString * _Nonnull)identifier operationWasSuccessful:(BOOL)operationWasSuccessful result:(RBSQLiteResult * _Nullable)result;
@end

/// Describes the SQL Query type.
typedef SWIFT_ENUM(NSInteger, RBORMQueryType, closed) {
  RBORMQueryTypeSelect = 0,
  RBORMQueryTypeDelete = 1,
  RBORMQueryTypeCount = 2,
  RBORMQueryTypeSum = 3,
  RBORMQueryTypeMin = 4,
  RBORMQueryTypeMax = 5,
  RBORMQueryTypeAverage = 6,
};


/// Stores the result of an ORM query execution.
SWIFT_CLASS("_TtC8Redbeard11RBORMResult")
@interface RBORMResult : NSObject
/// Whether or not the result is valid.
@property (nonatomic, readonly) BOOL isValid;
/// If the query was of a scalar type then this will be populated e.g. count *.
@property (nonatomic, readonly) id _Nullable scalarValue;
/// If the query was of a set type then this will return the list of orm objects.
- (NSArray<RBORMObject *> * _Nullable)objects SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A weak or strong collection of observer delegates.
SWIFT_CLASS("_TtC8Redbeard20RBObserverCollection")
@interface RBObserverCollection : NSObject
/// Initializes a new observer collection that keeps weak references (does not retain)
/// to its delegate observer objects.
/// @return The initialized observer collection object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new observer collection that keeps strong references (retains) to its
/// delegate observer objects.
/// @return The initialized observer collection object.
- (nonnull instancetype)initWithStrongReferences:(BOOL)strong OBJC_DESIGNATED_INITIALIZER;
/// Enumerates the delegate observer objects in the collection.
/// @param enumerationBlock The enumeration block to call on each delegate observer object.
- (void)enumerateObserversWithBlock:(void (^ _Nonnull)(id _Nonnull, BOOL))enumerationBlock;
/// Add a new delegate observer to the collection.
/// @param observer The observer object to add to the collection.
- (void)addObserver:(id _Nonnull)observer;
/// Remove a delegate observer from the collection.
/// @param observer The observer object to remove from the collection.
- (void)removeObserver:(id _Nonnull)observer;
@end


/// A delegate observer collection delegate.
SWIFT_PROTOCOL("_TtP8Redbeard28RBObserverCollectionDelegate_")
@protocol RBObserverCollectionDelegate <NSObject>
@optional
/// Called when the last delegate observer was removed and the collection became empty.
/// @param observerCollection The observer collection object.
- (void)observerCollectionBecameEmpty:(RBObserverCollection * _Nonnull)observerCollection;
/// Called when the first delegate observer was added and the collection became non-empty.
/// @param observerCollection The observer collection object.
- (void)observerCollectionBecameNonEmpty:(RBObserverCollection * _Nonnull)observerCollection;
@end

@class NSOperationQueue;

/// An operation with convenience subclassing hooks.
SWIFT_CLASS("_TtC8Redbeard11RBOperation")
@interface RBOperation : NSOperation <RBCancellableTask>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@property (nonatomic, readonly, getter=isConcurrent) BOOL concurrent;
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
/// Add the operation to a queue.
/// @param operationQueue The operation queue to add the operation to.
- (void)addTo:(NSOperationQueue * _Nonnull)operationQueue;
- (void)start;
- (void)cancel;
/// Completes the operation.
- (void)done;
- (void)setExecuting:(BOOL)executing;
- (void)setFinished:(BOOL)finished;
- (void)setCancelled:(BOOL)cancelled;
/// Called when the operation has begun processing.
- (void)operationDidStart;
/// Called when the operation has finished processing.
- (void)operationDidFinish;
/// Called when the operation has been cancelled.
- (void)operationDidCancel;
@end




/// The result of a layout view positioning operation.
SWIFT_CLASS("_TtC8Redbeard18RBPositionerResult")
@interface RBPositionerResult : NSObject
/// The calculated frame of each view in the given viewport. Array contains ’NSValue<code>s that wrap</code>CGRect`s.
@property (nonatomic, copy) NSArray<NSValue *> * _Nonnull frames;
/// The content size for the calculated frames in the given viewport.
@property (nonatomic, readonly) CGSize contentSize;
/// The recommended content size in the given viewport (i.e. with flexible spacing collapsed).
@property (nonatomic, readonly) CGSize recommendedContentSize;
/// Initializes a new layout view positioning result.
/// @param frames                  The calculated frame of each view in the given viewport.
/// @param contentSize             The content size for the calculated frames in the given viewport.
/// @return The initialized layout view positioning result.
- (nonnull instancetype)initWithFrames:(NSArray<NSValue *> * _Nonnull)frames contentSize:(CGSize)contentSize OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new layout view positioning result.
/// @param frames                  The calculated frame of each view in the given viewport.
/// @param contentSize             The content size for the calculated frames in the given viewport.
/// @param recommendedContentSize  The recommended content size in the given viewport (i.e. with flexible spacing collapsed).
/// @return The initialized layout view positioning result.
- (nonnull instancetype)initWithFrames:(NSArray<NSValue *> * _Nonnull)frames contentSize:(CGSize)contentSize recommendedContentSize:(CGSize)recommendedContentSize OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Stores the result of a calculation, recalculating when invalidated.
SWIFT_CLASS("_TtC8Redbeard34RBPrecalculatedDataPersistentCache")
@interface RBPrecalculatedDataPersistentCache : NSObject
/// Initializes a new calculated data persistent cache with the given settings.
/// @param storageKey         The unique storage key to use when saving and loading precalculated data.
/// @param recalculationBlock The block to call to recalculate the data.
/// @return The initialized object.
- (nonnull instancetype)initWithStorageKey:(NSString * _Nonnull)storageKey recalculationBlock:(NSData * _Nonnull (^ _Nonnull)(void))recalculationBlock OBJC_DESIGNATED_INITIALIZER;
/// Invalidates the data causing a recalculation before the next retrieval.
- (void)invalidate;
/// Retrieve the most recently calculated data.
/// @return An <code>NSData</code> object.
- (NSData * _Nullable)retrieveData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Manages a queue of items to be processed.
SWIFT_CLASS("_TtC8Redbeard17RBProcessingQueue")
@interface RBProcessingQueue : NSObject
/// The total set of items that were queued to be processed.
@property (nonatomic, readonly, copy) NSSet * _Nonnull items;
/// The set of items that were queued and have been processed.
@property (nonatomic, readonly, copy) NSSet * _Nonnull pendingItems;
/// The set of items that were queued and have not yet been processed.
@property (nonatomic, readonly, copy) NSSet * _Nonnull processedItems;
/// Adds a new item to the queue to be processed.
/// @param item The item to add to the queue.
- (void)enqueueItem:(NSObject * _Nonnull)item;
/// Marks whether an item in the queue has been processed.
/// @param item      The item to mark as processed or not processed.
/// @param processed Whether or not the item should be marked as processed (true) or unprocessed (false).
- (void)markItem:(NSObject * _Nonnull)item asProcessed:(BOOL)processed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Protocol;

/// Acts as a middle man enabling the interception of delegate calls.
/// If <code>middleMan</code> responds to a selector in the protocol, it will receive the delegate call
/// instead of the end receiver.  It is recommended it then forwards the call to the receiver.
SWIFT_CLASS("_TtC8Redbeard28RBProtocolMessageInterceptor")
@interface RBProtocolMessageInterceptor : NSObject
/// The end receiver of the delegate calls.
@property (nonatomic, readonly, weak) id _Nullable receiver;
/// The middle man that is provided with the opportunity to intercept delegate calls.
@property (nonatomic, readonly, weak) id _Nullable middleMan;
/// The protocol of the delegate.
@property (nonatomic, readonly, strong) Protocol * _Nonnull intercept;
/// Initializes a new protocol message interceptor.
/// @param intercept  The protocol of the delegate to intercept.
/// @param middleMan The middle man object to implement delegate methods to intercept.
/// @param receiver  The end receiver of the delegate calls.
/// @return The initialized protocol message interceptor, ready to be set as a delegate.
- (nonnull instancetype)initWithIntercept:(Protocol * _Nonnull)intercept middleMan:(id _Nullable)middleMan receiver:(id _Nullable)receiver OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)forwardingTargetForSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
- (BOOL)respondsToSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Redbeard11RBQuickView")
@interface RBQuickView : UIView
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSArray<UIView *> * _Null_unspecified views;
@property (nonatomic, strong) RBPositioner * _Null_unspecified positioner;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Redbeard18RBQuickViewBuilder")
@interface RBQuickViewBuilder : NSObject
@property (nonatomic, readonly, strong) RBQuickView * _Nonnull view;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, UIView *> * _Nonnull mappings;
+ (RBQuickViewBuilder * _Nullable)loadWithPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Random value generation.
SWIFT_CLASS("_TtC8Redbeard8RBRandom")
@interface RBRandom : NSObject
/// Generates a random UUID/GUID string.
/// @param includeHyphens Whether hyphens should be included.
/// @return The random UUID string.
+ (NSString * _Nonnull)uuidStringWithHyphens:(BOOL)includeHyphens SWIFT_WARN_UNUSED_RESULT;
/// Generates a random unsigned integer within the given range.
/// @param minimumValue The minimum value of the range.
/// @param maximumValue The maximum value of the range.
/// @return The random unsigned integer value.
+ (uint32_t)unsignedIntegerWithMinimumValue:(uint32_t)minimumValue maximumValue:(uint32_t)maximumValue SWIFT_WARN_UNUSED_RESULT;
/// Generates a random signed integer within the given range.
/// @param minimumValue The minimum value of the range.
/// @param maximumValue The maximum value of the range.
/// @return The random signed integer value.
+ (NSInteger)integerWithMinimumValue:(NSInteger)minimumValue maximumValue:(NSInteger)maximumValue SWIFT_WARN_UNUSED_RESULT;
/// Generates a random <code>double</code> value within the given range.
/// @param minimumValue The minimum value of the range.
/// @param maximumValue The maximum value of the range.
/// @return The random <code>double</code> value.
+ (double)doubleWithMinimumValue:(double)minimumValue maximumValue:(double)maximumValue SWIFT_WARN_UNUSED_RESULT;
/// Generates a random boolean value.
+ (BOOL)boolean SWIFT_WARN_UNUSED_RESULT;
/// Generates a random lorum ipsum string with the given word count.
/// @param wordCount The number of words to include in the string.
/// @return The random lorum ipsum string.
+ (NSString * _Nonnull)lorumIpsumWithWordCount:(NSInteger)wordCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A text refresh extend view.
SWIFT_CLASS("_TtC8Redbeard19RBRefreshExtendView")
@interface RBRefreshExtendView : RBExtendView
/// The text to display when the extend view is being revealed.
@property (nonatomic, copy) NSString * _Nullable textWhenRevealing;
/// The text to display when the extend view is fully revealed.
@property (nonatomic, copy) NSString * _Nullable textWhenRevealed;
/// The text to display when the extend view is open.
@property (nonatomic, copy) NSString * _Nullable textWhenRefreshing;
- (void)initializeView;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)didOpen;
- (void)didClose;
- (void)revealFactorDidChange:(CGFloat)to from:(CGFloat)from;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RBRestClientDelegate;
@class RBRestClientRequest;

/// Provides a easy to use FLUENT based networking client for most networking scenarios.
SWIFT_CLASS("_TtC8Redbeard12RBRestClient")
@interface RBRestClient : NSObject
/// Whether or not request URL’s should be printed for all requests.
@property (nonatomic) BOOL printRequestURL;
/// Whether or not request bodies should be printed for all requests.
@property (nonatomic) BOOL printRequestBody;
/// Whether or not request headers should be printed for all requests.
@property (nonatomic) BOOL printRequestHeaders;
/// Whether or not validation failures should be printed for all requests.
@property (nonatomic) BOOL printValidationFailure;
/// Whether or not response URL’s should be printed for all responses.
@property (nonatomic) BOOL printResponseURL;
/// Whether or not response bodies should be printed for all responses.
@property (nonatomic) BOOL printResponseBody;
/// Whether or not response headers should be printed for all responses.
@property (nonatomic) BOOL printResponseHeaders;
/// Headers that should be added to all requests originating from this client.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable applyAdditionalHeaders;
/// Query string parameters that should be added to all requests originating from this client.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable applyAdditionalParameters;
/// The base URL to use if none is specified.
@property (nonatomic, readonly, copy) NSURL * _Nonnull baseURL;
/// The <code>RBNetworkClient</code> that underpins this client.
@property (nonatomic, readonly, strong) RBNetworkClient * _Nonnull networkClient;
/// Delegate.
@property (nonatomic, weak) id <RBRestClientDelegate> _Nullable delegate;
/// Initializes a new client with the given parameters.
/// @param baseURL          The base url to use for requests.
/// @param networkClient    An existing networkClient to use instead of creating a new one.
/// @return A newly initialized <code>RBRestClient</code>.
- (nonnull instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL networkClient:(RBNetworkClient * _Nonnull)networkClient OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new client with the given parameters.
/// @param baseURL          The base url to use for requests.
/// @param configuration    A session configration.
/// @return A newly initialized <code>RBRestClient</code>.
- (nonnull instancetype)initWithBaseURL:(NSURL * _Nonnull)baseURL configuration:(NSURLSessionConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/// Create a request with a specific <code>URLRequest</code>.
/// @param request          The request. Allows requests to be made to URL’s other than those relating to the baseURL.
/// @return A FLUENT request object.
- (RBRestClientRequest * _Nonnull)requestWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Create a request with a specific url.
/// @param url          The url. Allows requests to be made to URL’s other than those relating to the baseURL.
/// @param method       HTTP method type e.g. POST/GET/DELETE…
/// @return A FLUENT request object.
- (RBRestClientRequest * _Nonnull)request:(NSURL * _Nonnull)url :(enum RBNetworkRequestMethod)method SWIFT_WARN_UNUSED_RESULT;
/// Create a request with a specific <code>URLRequest</code>.
/// @param method          HTTP method type e.g. POST/GET/DELETE…
/// @return A FLUENT request object.
- (RBRestClientRequest * _Nonnull)request:(enum RBNetworkRequestMethod)method SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class RBRestClientResponse;

SWIFT_PROTOCOL("_TtP8Redbeard20RBRestClientDelegate_")
@protocol RBRestClientDelegate <NSObject>
@optional
/// A convenience method to determine if the response should continue down the chain. Important this will not be called on a DispatchQueue it is your responsiblity to do so.
/// @param restClient     The client.
/// @param response       The response that will continue executing.
/// @return               Whether or not the response should continue.
- (BOOL)restClient:(RBRestClient * _Nonnull)restClient continueWith:(RBRestClientResponse * _Nonnull)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides a easy to use FLUENT based networking request.
SWIFT_CLASS("_TtC8Redbeard19RBRestClientRequest")
@interface RBRestClientRequest : NSObject
/// Whether or not the request URL should be printed for this request.
@property (nonatomic) BOOL printRequestURL;
/// Whether or not the request body should be printed for this request.
@property (nonatomic) BOOL printRequestBody;
/// Whether or not the request headers should be printed for this request.
@property (nonatomic) BOOL printRequestHeaders;
/// Whether or not the validation failures should be printed for this request.
@property (nonatomic) BOOL printValidationFailure;
/// Whether or not the response URL should be printed for this request.
@property (nonatomic) BOOL printResponseURL;
/// Whether or not the response body should be printed for this request.
@property (nonatomic) BOOL printResponseBody;
/// Whether or not the response headers should be printed for this request.
@property (nonatomic) BOOL printResponseHeaders;
/// Add a path to the current URL e.g. URL = http://www.redbeard.io/, path = /categories/1
/// @param path         The path to add.
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)addPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Adds a new header value.
/// @param value    The header value.
/// @param name     The header name.
/// @return The request builder so that you can continue to call methods.
- (RBRestClientRequest * _Nonnull)addHeader:(NSString * _Nonnull)value :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets the headers.
/// @param params    The headers.
/// @return The request builder so that you can continue to call methods.
- (RBRestClientRequest * _Nonnull)headers:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Adds a new query parameter.
/// @param value    The query value.
/// @param name     The query name.
/// @return The request builder so that you can continue to call methods.
- (RBRestClientRequest * _Nonnull)addParameter:(NSString * _Nonnull)value :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets query parameters.
/// @param params    The parameters
/// @return The request builder so that you can continue to call methods.
- (RBRestClientRequest * _Nonnull)parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Sets body data.
/// @param data    The data.
/// @return The request builder so that you can continue to call methods.
- (RBRestClientRequest * _Nonnull)bodyWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Sets body data.
/// @param json     The json object.
/// @return The request builder so that you can continue to call methods.
- (RBRestClientRequest * _Nonnull)body:(RBJsonObject * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Set a validation to check for a specific HTTP status code.
/// @param statusCode    The specific status code to check for.
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)validateStatusCode:(NSInteger)statusCode SWIFT_WARN_UNUSED_RESULT;
/// Set a validation to check for a specific HTTP content type.
/// @param contentType    The specific content type to check for.
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)validateContentType:(NSString * _Nonnull)contentType SWIFT_WARN_UNUSED_RESULT;
/// Set a validation to check a response body is present
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)validateBodyPresent SWIFT_WARN_UNUSED_RESULT;
/// Set all request debug printing options in a single method call.
/// @param printRequestURL          Whether or not the request URL should be printed for this request.
/// @param printRequestHeaders      Whether or not the request body should be printed for this request.
/// @param printRequestBody         Whether or not the request headers should be printed for this request.
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)printRequest:(BOOL)printRequestURL :(BOOL)printRequestHeaders :(BOOL)printRequestBody SWIFT_WARN_UNUSED_RESULT;
/// Set all response debug printing options in a single method call.
/// @param printValidationFailure       Whether or not the validation failures should be printed for this request.
/// @param printResponseURL             Whether or not the response URL should be printed for this request.
/// @param printResponseHeaders         Whether or not the response body should be printed for this request.
/// @param printResponseBody            Whether or not the response headers should be printed for this request.
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)printResponse:(BOOL)printValidationFailure :(BOOL)printResponseURL :(BOOL)printResponseHeaders :(BOOL)printResponseBody SWIFT_WARN_UNUSED_RESULT;
/// Receive progress updates for a request.
/// @param queue          Optional dispath queue on which to receive updates. If <code>nil</code> then DispathQueue.main will be used.
/// @param onProgress     Block that should receive updates.
/// @return The updated <code>RBRestClientRequest</code> object.
- (RBRestClientRequest * _Nonnull)onProgress:(dispatch_queue_t _Nullable)queue :(void (^ _Nonnull)(int64_t, int64_t, int64_t))onProgress SWIFT_WARN_UNUSED_RESULT;
/// Initiates a raw response for the request.
/// @param queue          Optional dispath queue on which to receive updates. If <code>nil</code> then DispathQueue.main will be used.
/// @param completion     Completion block.
- (void)response:(dispatch_queue_t _Nullable)queue completion:(void (^ _Nullable)(BOOL, RBRestClientResponse * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Captures a HTTP Response.
SWIFT_CLASS("_TtC8Redbeard20RBRestClientResponse")
@interface RBRestClientResponse : NSObject
/// Whether or not the result is valid. This will be false if a network or validation failure occured.
@property (nonatomic, readonly) BOOL isValid;
/// Specific detail on the error if one has occured.
@property (nonatomic, readonly) NSError * _Nullable error;
/// The underlying network opertation that contains the response.
@property (nonatomic, readonly, strong) RBNetworkOperation * _Nullable operation;
/// The HTTP status code if available otherwise 0.
@property (nonatomic, readonly) NSInteger httpStatusCode;
/// The underlying HTTP response object.
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable httpURLResponse;
/// The response data.
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Deserializes the <code>data</code> property to a JSON object.
/// @return The JSON as dictionary or an array of dictionaries as appropriate or <code>nil</code> if <code>data</code> is empty or the response was invalid.
- (id _Nullable)dataAsJson SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end







/// A separator view for a managed form.
SWIFT_CLASS("_TtC8Redbeard15RBSeparatorView")
@interface RBSeparatorView : UIView
/// The size of the empty space;
@property (nonatomic) CGSize size;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)initializeView;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol RBSequenceControllerDelegate;
@class RBSequenceStep;

/// Manages a sequence of transitions.
SWIFT_CLASS("_TtC8Redbeard20RBSequenceController")
@interface RBSequenceController : NSObject
/// The delegate to receive transition change events.
@property (nonatomic, weak) id <RBSequenceControllerDelegate> _Nullable delegate;
/// The number of steps in the sequence.
@property (nonatomic, readonly) NSInteger stepCount;
/// The index of the current step in the sequence.
@property (nonatomic, readonly) NSInteger stepIndex;
/// Whether or not the controller should automatically move to the next step.
@property (nonatomic) BOOL automaticStepEnabled;
/// The delay that the controller should observe between a step being completed
/// and transitioning to the next step.
@property (nonatomic) NSTimeInterval automaticStepDelay;
/// Whether or not the controller should automatically repeat the sequence when it finishes.
@property (nonatomic) BOOL shouldRepeatAtEnd;
/// Add a step to the sequence.
/// @param sequenceStep The <code>RBSequenceStep</code> object to add.
- (void)add:(RBSequenceStep * _Nonnull)sequenceStep;
/// Starts the sequence.
/// @return Whether or not the operation completed successfully.
- (BOOL)start SWIFT_WARN_UNUSED_RESULT;
/// Transitions to the next step in the sequence.
/// @return Whether or not the operation completed successfully.
- (BOOL)nextStep SWIFT_WARN_UNUSED_RESULT;
/// Resets to the first step in the sequence.
- (void)resetAndRewind;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The sequence controller delegate to receive transition change events.
SWIFT_PROTOCOL("_TtP8Redbeard28RBSequenceControllerDelegate_")
@protocol RBSequenceControllerDelegate <NSObject>
@optional
/// The controller did start the sequence.
/// @param sequenceController The sequence controller object.
- (void)sequenceDidStartWith:(RBSequenceController * _Nonnull)sequenceController;
/// The controller did complete the transition to a step.
/// @param stepIndex          The step index that was transitioned to.
/// @param sequenceController The sequence controller object.
- (void)sequenceDidCompleteStep:(NSInteger)stepIndex with:(RBSequenceController * _Nonnull)sequenceController;
/// The controller did complete the sequence.
/// @param sequenceController The sequence controller.
/// @param willRepeat         Whether the controller will automatically repeat the sequence.
- (void)sequenceDidCompleteWith:(RBSequenceController * _Nonnull)sequenceController willRepeat:(BOOL)willRepeat;
@end


/// A step in a sequence.
SWIFT_CLASS("_TtC8Redbeard14RBSequenceStep")
@interface RBSequenceStep : NSObject
/// The block to be called when transitioning into the sequence step.
@property (nonatomic, readonly, copy) void (^ _Nullable initializationBlock)(SWIFT_NOESCAPE void (^ _Nonnull)(NSDictionary * _Nullable));
/// The block to be called when transitioning out of the sequence step.
@property (nonatomic, readonly, copy) void (^ _Nullable completionBlock)(NSDictionary * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(void));
/// The time in seconds to wait after the step has been fully transitioned into.
@property (nonatomic, readonly) NSTimeInterval presentationDuration;
/// Whether or not the step is currently active and running.
@property (nonatomic, readonly) BOOL isRunning;
/// Initializes a new sequence step.
/// @param initializationBlock  The block to be called when transitioning into the sequence step.
/// @param completionBlock      The block to be called when transitioning out of the sequence step.
/// @param presentationDuration The time in seconds to wait after the step has been fully transitioned into.
/// @return The initialized object.
- (nullable instancetype)initWithInitializationBlock:(void (^ _Nullable)(SWIFT_NOESCAPE void (^ _Nonnull)(NSDictionary * _Nullable)))initializationBlock completionBlock:(void (^ _Nullable)(NSDictionary * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(void)))completionBlock presentationDuration:(NSTimeInterval)presentationDuration error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@class NSAttributedString;

/// A simple label cell which provides a title and detail label as well as an accompanying image view.
SWIFT_CLASS("_TtC8Redbeard16RBSimpleCellView")
@interface RBSimpleCellView : RBBaseCellView
/// The underlying image view.
@property (nonatomic, readonly, strong) RBImageView * _Nonnull imageView;
/// The underlying title label view.
@property (nonatomic, readonly, strong) RBLabel * _Nonnull titleLabel;
/// The underlying detail label view.
@property (nonatomic, readonly, strong) RBLabel * _Nonnull detailLabel;
/// The margin to provide around the cell content.
@property (nonatomic) UIEdgeInsets margin;
/// The spacing to provide between the image and the labels.
@property (nonatomic) CGFloat spacing;
/// Whether or not an image is displayed in the cell.
@property (nonatomic) BOOL imageEnabled;
/// The width of the image in pixels.
@property (nonatomic) CGFloat imageWidth;
/// The title text to display in the label.
@property (nonatomic, copy) NSString * _Nullable title;
/// The attributed title text to display in the label.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle;
/// The detail text to display in the label.
@property (nonatomic, copy) NSString * _Nullable detail;
/// The attributed detail text to display in the label.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedDetail;
- (void)populateBodyView:(UIView * _Nonnull)bodyView;
- (void)layoutBodyView:(UIView * _Nonnull)bodyView;
- (CGSize)bodyViewSizeThatFitsSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)updateLayout;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme toBodyView:(UIView * _Nonnull)bodyView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides stack positioning with alignment in a given orientation.
SWIFT_CLASS("_TtC8Redbeard17RBStackPositioner")
@interface RBStackPositioner : RBPositioner
/// The orientation in which the cells should be positioned. Default = <code>RBOrientationVertical</code>.
@property (nonatomic) RBOrientation orientation;
/// The vertical alignment of the cells. Default = <code>RBVerticalAlignmentMiddle</code>.
@property (nonatomic) RBVerticalAlignment verticalAlignment;
/// The horizontal alignment of the cells. Default = <code>RBHorizontalAlignmentCenter</code>.
@property (nonatomic) RBHorizontalAlignment horizontalAlignment;
/// Whether or not cells should fill the available width. Default = NO.
@property (nonatomic) BOOL shouldFillWidth;
/// Whether or not cells should fill the available height. Default = NO.
@property (nonatomic) BOOL shouldFillHeight;
- (RBPositionerResult * _Nonnull)calculateWithNumberOfViews:(NSInteger)numberOfViews viewPort:(CGSize)viewPort sizeBlock:(SWIFT_NOESCAPE CGSize (^ _Nonnull)(NSInteger, CGSize))sizeBlock SWIFT_WARN_UNUSED_RESULT;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RBTabController;
@class RBTabBarItem;

SWIFT_CLASS("_TtC8Redbeard8RBTabBar")
@interface RBTabBar : UIView
@property (nonatomic, weak) RBTabController * _Nullable parent;
@property (nonatomic) CGFloat height;
@property (nonatomic) UIEdgeInsets margin;
@property (nonatomic, readonly, copy) NSArray<RBTabBarItem *> * _Nonnull items;
- (nonnull instancetype)initWithItems:(NSArray<RBTabBarItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)layout;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class RBButton;

/// Tab bar items.
SWIFT_CLASS("_TtC8Redbeard12RBTabBarItem")
@interface RBTabBarItem : NSObject
/// Whether or not to fill all available space.
@property (nonatomic, readonly) BOOL fill;
/// The location of the item.
@property (nonatomic, readonly) RBHorizontalAlignment alignment;
/// The theme identifier of the item.
@property (nonatomic, copy) NSString * _Nonnull themeIdentifier;
/// The view controller that provides the contents of the item.
@property (nonatomic, readonly, strong) UIViewController * _Nullable viewController;
@property (nonatomic, readonly, strong) UIView * _Nullable view;
@property (nonatomic, readonly, strong) RBButton * _Nullable button;
@property (nonatomic, readonly) BOOL isViewOnly;
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Initializes a new <code>RBTabItem</code> that displays a custom view.
/// @param view             The custom view.
/// @param alignment        The location of the view.
/// @param fill             Fill available space.
/// @return The initialized <code>RBTabItem</code>.
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view alignment:(RBHorizontalAlignment)alignment fill:(BOOL)fill OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new <code>RBTabItem</code>.
/// @param vc               The view controller.
/// @param title            The title to apply to the tab button.
/// @param image            The image to apply to the tab button.
/// @param alignment        The location of the tab button.
/// @param fill             Fill available space.
/// @return The initialized <code>RBTabItem</code>.
- (nonnull instancetype)initWithVc:(UIViewController * _Nonnull)vc title:(NSString * _Nullable)title image:(UIImage * _Nullable)image alignment:(RBHorizontalAlignment)alignment fill:(BOOL)fill OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol RBTabControllerDelegate;
@class RBNavigationAnimator;

/// A tab bar controllers that manages pages with tabs.
SWIFT_CLASS("_TtC8Redbeard15RBTabController")
@interface RBTabController : UIViewController
/// A delegate to receive tab page selection events.
@property (nonatomic, weak) id <RBTabControllerDelegate> _Nullable delegate;
/// The animator that is used to provide animated transitions.
@property (nonatomic, strong) RBNavigationAnimator * _Nullable animator;
/// A tab bar
@property (nonatomic, strong) RBTabBar * _Nullable tabBar;
/// Animator to be used when showing or hiding the tabBar.
@property (nonatomic, strong) RBAnimator * _Nonnull tabBarAnimator;
/// Whether or not the tabBar is hidden.
@property (nonatomic, readonly) BOOL tabBarIsHidden;
/// The number of tab pages currently in the container.
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull viewControllers;
/// Gets the selected tab page via the index. Returns < 0 if a page is not set.
@property (nonatomic, readonly) NSInteger selectedIndex;
/// Gets the selected tab page.
@property (nonatomic, readonly, strong) UIViewController * _Nullable selectedViewController;
- (void)viewWillLayoutSubviews;
- (void)setViewControllerWithVc:(UIViewController * _Nonnull)vc completion:(void (^ _Nullable)(void))completion;
- (void)setViewControllerWithVc:(UIViewController * _Nonnull)vc animator:(RBNavigationAnimator * _Nullable)animator completion:(void (^ _Nullable)(void))completion;
- (void)hideTabBarWithHide:(BOOL)hide animated:(BOOL)animated;
/// Called to notify that a tab will be selected.
/// @param vc               The view controller.
/// @param animated         Whether or not the transition to the page will be animated.
- (BOOL)tabBarShouldSelectWithVc:(UIViewController * _Nonnull)vc animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Called to notify that a tab was selected.
/// @param vc               The view controller.
/// @param animated         Whether or not the transition to the page will be animated.
- (void)tabBarDidSelectWithVc:(UIViewController * _Nonnull)vc animated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A delegate to receive tab page selection events.
SWIFT_PROTOCOL("_TtP8Redbeard23RBTabControllerDelegate_")
@protocol RBTabControllerDelegate <NSObject>
/// Called to notify that a tab should be selected.
/// @param vc               The view controller.
/// @param animated         Whether or not the transition to the page will be animated.
- (BOOL)tabBarWithTabBar:(RBTabController * _Nonnull)tabBar shouldSelect:(UIViewController * _Nonnull)vc animated:(BOOL)animated SWIFT_WARN_UNUSED_RESULT;
/// Called to notify that a tab was selected.
/// @param vc               The view controller.
/// @param animated         Whether or not the transition to the page will be animated.
- (void)tabBarWithTabBar:(RBTabController * _Nonnull)tabBar didSelect:(UIViewController * _Nonnull)vc animated:(BOOL)animated;
@end

/// The native types that are supported as theme property values.
typedef SWIFT_ENUM(NSInteger, RBThemeNativeType, closed) {
/// An integer value.
  RBThemeNativeTypeInteger = 0,
/// A decimal number.
  RBThemeNativeTypeDecimal = 1,
/// A percentage decimal.
  RBThemeNativeTypeDecimalPercentage = 2,
/// A boolean value.
  RBThemeNativeTypeBoolean = 3,
};

@class RBThemeSchemaState;

SWIFT_CLASS("_TtC8Redbeard13RBThemeSchema")
@interface RBThemeSchema : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, RBThemeSchema *> * _Nonnull fields;
+ (NSArray<Class> * _Nonnull)allTypesWithSchemas SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSDictionary<NSString *, id> *> * _Nullable)treesForTypes:(NSArray<Class> * _Nonnull)types error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTypeClass:(Class _Nonnull)typeClass withParentSchema:(RBThemeSchema * _Nullable)parentSchema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNativeType:(enum RBThemeNativeType)nativeType withParentSchema:(RBThemeSchema * _Nullable)parentSchema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nonnull)typeName withParentSchema:(RBThemeSchema * _Nullable)parentSchema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEnumTypeName:(NSString * _Nonnull)enumTypeName withParentSchema:(RBThemeSchema * _Nullable)parentSchema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithEnumTypeName:(NSString * _Nonnull)enumTypeName enumValues:(NSArray<NSString *> * _Nonnull)enumValues withParentSchema:(RBThemeSchema * _Nullable)parentSchema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)importSchema:(RBThemeSchema * _Nonnull)themeSchema;
- (void)importProperties:(NSArray<NSString *> * _Nonnull)properties from:(RBThemeSchema * _Nonnull)themeSchema;
- (void)addNote:(NSString * _Nonnull)noteString;
- (void)add:(RBThemeSchemaState * _Nonnull)state;
- (RBThemeSchema * _Nullable)setPropertyWithName:(NSString * _Nonnull)propertyName schema:(RBThemeSchema * _Nonnull)themeSchema;
- (RBThemeSchema * _Nullable)setPropertyWithName:(NSString * _Nonnull)propertyName type:(Class _Nonnull)type notes:(NSString * _Nullable)notes;
- (RBThemeSchema * _Nullable)setPropertyWithName:(NSString * _Nonnull)propertyName nativeType:(enum RBThemeNativeType)nativeType notes:(NSString * _Nullable)notes;
- (RBThemeSchema * _Nullable)setPropertyWithName:(NSString * _Nonnull)propertyName typeName:(NSString * _Nonnull)typeName notes:(NSString * _Nullable)notes;
- (RBThemeSchema * _Nullable)setEnumPropertyWithName:(NSString * _Nonnull)propertyName enumerationTypeName:(NSString * _Nonnull)enumerationTypeName notes:(NSString * _Nullable)notes;
- (RBThemeSchema * _Nullable)setEnumPropertyWithName:(NSString * _Nonnull)propertyName enumerationTypeName:(NSString * _Nonnull)enumerationTypeName enumValues:(NSArray<NSString *> * _Nonnull)enumValues notes:(NSString * _Nullable)notes;
- (void)removeStateWithName:(NSString * _Nonnull)stateName;
- (void)removePropertyWithName:(NSString * _Nonnull)propertyName;
- (void)removeAllNotes;
- (void)removeAllStates;
- (void)removeAllProperties;
- (NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
@end


/// Describes an object’s state that can be independantly themed.
SWIFT_CLASS("_TtC8Redbeard18RBThemeSchemaState")
@interface RBThemeSchemaState : NSObject
/// The name of the state.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// An optional note about the state.
@property (nonatomic, readonly, copy) NSString * _Nullable note;
/// Initializes a new state theme schema.
/// @param name The name of the state.
/// @param note An optional note about the state.
/// @return The initialized schema object.
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name note:(NSString * _Nullable)note OBJC_DESIGNATED_INITIALIZER;
/// Serialises the theme schema state to a property list.
/// @return The serialised theme schema state.
- (NSDictionary<NSString *, id> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
/// Adds a sub state to this state.
/// @param state The sub state
- (void)addSubState:(RBThemeSchemaState * _Nonnull)state;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Threading convenience methods.
SWIFT_CLASS("_TtC8Redbeard11RBThreading")
@interface RBThreading : NSObject
/// Executes a block after a delay.
/// @param taskBlock     The block to execute.
/// @param delay         The delay in seconds until the block will be executed.
/// @param dispatchQueue The queue to execute the block in.
/// @return A <code>id<RBCancellableTask></code> object that can be cancelled before execution.
+ (id <RBCancellableTask> _Nonnull)dispatchTaskBlock:(void (^ _Nonnull)(void))taskBlock afterDelay:(NSTimeInterval)delay using:(dispatch_queue_t _Nonnull)dispatchQueue SWIFT_WARN_UNUSED_RESULT;
/// Measures the time that it takes to complete a task.
/// @param taskBlock  The block to execute the task.
/// @param completion The completion block that is called at the end with the result.
+ (void)measureTask:(void (^ _Nonnull)(SWIFT_NOESCAPE void (^ _Nonnull)(void)))taskBlock completion:(void (^ _Nonnull)(NSTimeInterval))completion;
/// Calls a block on the main thread. Checks if the current thread is the the main one otherwise uses DispatchQueue.main.sync
/// @param block  The block to execute.
+ (void)dispatchMain:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The cut off after which to stop.
typedef SWIFT_ENUM(NSInteger, RBTimesinceCutoff, closed) {
/// Cut off below a year.
  RBTimesinceCutoffYears = 0,
/// Cut off below a month.
  RBTimesinceCutoffMonths = 1,
/// Cut off below a week.
  RBTimesinceCutoffWeeks = 2,
/// Cut off below a day.
  RBTimesinceCutoffDays = 3,
/// Cut off below an hour.
  RBTimesinceCutoffHours = 4,
/// Cut off below a minute.
  RBTimesinceCutoffMinutes = 5,
/// Cut off below a second. Does nothing.
  RBTimesinceCutoffSeconds = 6,
/// Do not apply a cutoff.
  RBTimesinceCutoffNone = 100,
};

/// The depth to which to describe the time span.
typedef SWIFT_ENUM(NSInteger, RBTimesinceDepth, closed) {
/// Describe the time span in years, months, weeks, days, hours, minute and seconds.
  RBTimesinceDepthYears = 0,
/// Describe the time span in months, weeks, days, hours, minute and seconds.
  RBTimesinceDepthMonths = 1,
/// Describe the time span in weeks, days, hours, minute and seconds.
  RBTimesinceDepthWeeks = 2,
/// Describe the time span in days, hours, minute and seconds.
  RBTimesinceDepthDays = 3,
/// Describe the time span in hours, minutes and seconds.
  RBTimesinceDepthHours = 4,
/// Describe the time span in minutes and seconds.
  RBTimesinceDepthMinutes = 5,
/// Describe the time span in seconds.
  RBTimesinceDepthSeconds = 6,
};


/// The Twitter social sharing service.
SWIFT_CLASS("_TtC8Redbeard23RBTwitterSharingService")
@interface RBTwitterSharingService : RBSharingService
- (BOOL)composeWithText:(NSString * _Nonnull)text completion:(void (^ _Nullable)(BOOL))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIWindow;

SWIFT_CLASS("_TtC8Redbeard10RBUICenter")
@interface RBUICenter : NSObject
/// The shared UI center.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) RBUICenter * _Nonnull shared;)
+ (RBUICenter * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(RBUICenter * _Nonnull)value;
/// The application window.
@property (nonatomic, readonly, strong) UIWindow * _Nullable window;
/// The application root view controller.
@property (nonatomic, readonly, strong) UIViewController * _Nullable rootViewController;
/// The application root view.
@property (nonatomic, readonly, strong) UIView * _Nullable rootView;
/// The current device orientation.
@property (nonatomic, readonly) UIDeviceOrientation deviceOrientation;
/// Whether or not the current device orientation is landscape.
@property (nonatomic, readonly) BOOL deviceOrientationIsLandscape;
/// Whether or not the current device orientation is portrait.
@property (nonatomic, readonly) BOOL deviceOrientationIsPortrait;
/// A collection of observers to be notified of changes to the device orientation.
@property (nonatomic, readonly, strong) RBObserverCollection * _Nonnull deviceOrientationObservers;
/// Whether or not the keyboard is currently opening.
@property (nonatomic, readonly) BOOL keyboardIsOpening;
/// Whether or not the keyboard is currently hiding.
@property (nonatomic, readonly) BOOL keyboardIsHiding;
/// Whether or not the keyboard is currently open.
@property (nonatomic, readonly) BOOL keyboardIsOpen;
/// The animation duration used for keyboard open/hide transitions.
@property (nonatomic, readonly) NSTimeInterval keyboardAnimationDuration;
/// The animation curve used for keyboard open/hide transitions.
@property (nonatomic, readonly) UIViewAnimationCurve keyboardAnimationCurve;
/// A collection of observers to be notified of changes to the keyboard state.
@property (nonatomic, readonly, strong) RBObserverCollection * _Nonnull keyboardObservers;
/// The current rotation-adjusted screen size.
+ (CGSize)screenSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Gets the top-most presented view controller.
/// This is not for view controllers presented with <code>RBPresentationController</code>.
- (UIViewController * _Nullable)topViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the frame in the view where the keyboard intersects with the view.
/// @param view The view to use as the local coordinate system.
/// @return The resulting <code>CGRect</code> value.
- (CGRect)keyboardIntersectionWith:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Returns the insets that would be required in the given view to avoid the keyboard.
/// @param view The view to use as the local coordinate system.
/// @return The resulting <code>UIEdgeInsets</code> value.
- (UIEdgeInsets)keyboardInsetsWith:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calculates the status bar frame that occupies the given view.
/// @param view The view to use as the local coordinate system.
/// @return The resulting <code>CGRect</code> frame.
- (CGRect)statusBarFrameIn:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Calculates the frame of the keyboard that occupies the given view.
/// @param view The view to use as the local coordinate system.
/// @return The resulting <code>CGRect</code> value.
- (CGRect)keyboardFrameIn:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
@end


/// A convenience URLRequest builder class.
SWIFT_CLASS("_TtC8Redbeard19RBURLRequestBuilder")
@interface RBURLRequestBuilder : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSData * _Nullable body;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull queries;
@property (nonatomic) enum RBNetworkRequestMethod method;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithString:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (RBURLRequestBuilder * _Nonnull)addPath:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
- (RBURLRequestBuilder * _Nonnull)method:(enum RBNetworkRequestMethod)method SWIFT_WARN_UNUSED_RESULT;
/// Adds a new header value.
/// @param value    The header value.
/// @param name     The header name.
/// @return The request builder so that you can continue to call methods.
- (RBURLRequestBuilder * _Nonnull)addHeader:(NSString * _Nonnull)value :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets the headers.
/// @param params    The headers.
/// @return The request builder so that you can continue to call methods.
- (RBURLRequestBuilder * _Nonnull)headers:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Adds a new query parameter.
/// @param value    The query value.
/// @param name     The query name.
/// @return The request builder so that you can continue to call methods.
- (RBURLRequestBuilder * _Nonnull)addParameter:(NSString * _Nonnull)value :(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets query parameters.
/// @param params    The parameters
/// @return The request builder so that you can continue to call methods.
- (RBURLRequestBuilder * _Nonnull)parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Sets body data.
/// @param data    The data.
/// @return The request builder so that you can continue to call methods.
- (RBURLRequestBuilder * _Nonnull)bodyWithData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Sets body data.
/// @param json     The json object.
/// @return The request builder so that you can continue to call methods.
- (RBURLRequestBuilder * _Nonnull)body:(RBJsonObject * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nonnull)createURL SWIFT_WARN_UNUSED_RESULT;
- (NSURLRequest * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// A page view controller with a header (optional).
SWIFT_CLASS("_TtC8Redbeard16RBViewController")
@interface RBViewController : UIViewController
/// The header to display within the page.
@property (nonatomic, strong) RBHeaderViewController * _Nullable header;
/// Whether or not the page header is hidden or not (can be animated).
@property (nonatomic) BOOL headerIsHidden;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
+ (RBThemeSchema * _Nonnull)generateThemeSchemaWithParent:(RBThemeSchema * _Nullable)parent SWIFT_WARN_UNUSED_RESULT;
- (void)applyTheme:(NSDictionary<NSString *, id> * _Nonnull)theme;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// The available effect types.
typedef SWIFT_ENUM(NSInteger, RBVisualEffectType, closed) {
/// No visual effect.
  RBVisualEffectTypeNone = 0,
/// A darkening blur visual effect.
  RBVisualEffectTypeBlurDark = 1,
/// A darkening blur visual effect with vibrancy.
  RBVisualEffectTypeBlurDarkWithVibrancy = 2,
/// A lightening blur visual effect.
  RBVisualEffectTypeBlurLight = 3,
/// A lightening blur visual effect with vibrancy.
  RBVisualEffectTypeBlurLightWithVibrancy = 4,
/// An extra-lightening blur visual effect.
  RBVisualEffectTypeBlurExtraLight = 5,
/// An extra-lightening blur visual effect with vibrancy.
  RBVisualEffectTypeBlurExtraLightWithVibrancy = 6,
};

/// Describes the current mode.
typedef SWIFT_ENUM(NSInteger, RefreshViewMode, closed) {
  RefreshViewModeClosed = 0,
  RefreshViewModeRevealed = 1,
  RefreshViewModeRevealing = 2,
  RefreshViewModeOpened = 3,
};


@interface UIColor (SWIFT_EXTENSION(Redbeard))
/// Returns a randomly selected color.
/// @return A randomly selected <code>UIColor</code> object.
+ (UIColor * _Nonnull)random SWIFT_WARN_UNUSED_RESULT;
/// Returns the hex color code for this color.
/// @return The hex color code.
- (NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
/// Creates a <code>UIColor</code> object from a hex color code.
/// @param hexString The hex color code to parse. May begin with ‘#’ or ‘0x’. The alpha channel is optional.
/// @return The resulting <code>UIColor</code> object.
- (nullable instancetype)initWithHexString:(NSString * _Nonnull)hexString;
/// Returns the inverse of this color.
/// @return The inverse color.
- (UIColor * _Nonnull)inverse SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIDevice (SWIFT_EXTENSION(Redbeard))
/// Determines whether the device is a simulator.
@property (nonatomic, readonly) BOOL isSimulator;
/// Make the device vibrate (if it is possible).
- (void)vibrate;
/// Determines whether or not the system version is equal to the version given.
/// @param systemVersion The version to compare to the actual system version.
/// @return Whether or not the system version is equal to the version given.
- (BOOL)systemVersionIsEqualTo:(NSString * _Nonnull)systemVersion SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the system version is greater than the version given.
/// @param systemVersion The version to compare to the actual system version.
/// @return Whether or not the system version is greater than the version given.
- (BOOL)systemVersionIsGreaterThan:(NSString * _Nonnull)systemVersion SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the system version is greater than or equal to the version given.
/// @param systemVersion The version to compare to the actual system version.
/// @return Whether or not the system version is greater than or equal to the version given.
- (BOOL)systemVersionIsGreaterThanOrEqualTo:(NSString * _Nonnull)systemVersion SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the system version is less than the version given.
/// @param systemVersion The version to compare to the actual system version.
/// @return Whether or not the system version is less than the version given.
- (BOOL)systemVersionIsLessThan:(NSString * _Nonnull)systemVersion SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the system version is less than or equal to the version given.
/// @param systemVersion The version to compare to the actual system version.
/// @return Whether or not the system version is less than or equal to the version given.
- (BOOL)systemVersionIsLessThanOrEqualTo:(NSString * _Nonnull)systemVersion SWIFT_WARN_UNUSED_RESULT;
/// Make the device emit the keyboard click sound (if it is possible).
- (void)keyboardClickSound;
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
@property (nonatomic, readonly) enum RBDeviceSizeProfile sizeProfile;
@end


@interface UIFont (SWIFT_EXTENSION(Redbeard))
/// Calculates the size of a given string given a bounding box.
/// @param text         The string to use.
/// @param bounds       The bounds.
/// @param options      The string drawing options. Default = <code>usesLineFragmentOrigin</code>.
/// @return The size of the string.
- (CGSize)sizeOfText:(NSString * _Nonnull)text bounds:(CGSize)bounds options:(NSStringDrawingOptions)options SWIFT_WARN_UNUSED_RESULT;
/// Calculates the maximum size that a character can be in this font.
/// @return The maximum size that a character can be in this font.
- (CGSize)maxCharacterSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(Redbeard))
/// Cancels the current gesture being recognised.
- (void)cancel;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
